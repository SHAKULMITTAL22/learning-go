// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package RadixSort

import (
	"testing"
	"reflect"
)

// TestCountSort_de82b0c79b is a test function for countSort
func TestCountSort_de82b0c79b(t *testing.T) {
	// Test case 1
	{
		arr := []int{170, 45, 75, 90, 802, 24, 2, 66}
		exp := 1
		countSort_de82b0c79b(arr, len(arr), exp)
		expected := []int{170, 90, 802, 2, 24, 45, 75, 66}
		if !reflect.DeepEqual(arr, expected) {
			t.Errorf("TestCountSort_de82b0c79b failed, expected %v, got %v", expected, arr)
		} else {
			t.Logf("TestCountSort_de82b0c79b passed")
		}
	}

	// Test case 2
	{
		arr := []int{170, 45, 75, 90, 802, 24, 2, 66}
		exp := 10
		countSort_de82b0c79b(arr, len(arr), exp)
		expected := []int{802, 2, 24, 45, 66, 170, 75, 90}
		if !reflect.DeepEqual(arr, expected) {
			t.Errorf("TestCountSort_de82b0c79b failed, expected %v, got %v", expected, arr)
		} else {
			t.Logf("TestCountSort_de82b0c79b passed")
		}
	}
}

func countSort_de82b0c79b(arr []int, n int, exp int) {
	output := make([]int, n)
	var count = []int{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	i := 0

	// Store count of occurrences in count[]
	for i = 0; i < n; i++ {
		count[(arr[i]/exp)%10]++
	}

	// Change count[i] so that count[i] now contains actual position of this digit in output[]
	for i = 1; i < 10; i++ {
		count[i] += count[i-1]
	}

	// Build the output array
	for i = n - 1; i >= 0; i-- {
		output[count[(arr[i]/exp)%10]-1] = arr[i]
		count[(arr[i]/exp)%10]--
	}

	// Copy the output array to arr[], so that arr[] now contains sorted numbers according to current digit
	for i = 0; i < n; i++ {
		arr[i] = output[i]
	}
}
