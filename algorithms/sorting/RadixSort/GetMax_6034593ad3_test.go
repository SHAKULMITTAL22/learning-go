// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package RadixSort

import (
	"testing"
)

// TestGetMax_6034593ad3 is a test function for getMax
func TestGetMax_6034593ad3(t *testing.T) {
	// test case 1: normal case
	arr1 := []int{1, 3, 2, 5, 4}
	max1 := getMax(arr1, len(arr1))
	if max1 != 5 {
		t.Errorf("getMax(%v) = %d; want 5", arr1, max1)
	} else {
		t.Logf("TestGetMax_6034593ad3 test case 1 success")
	}

	// test case 2: all elements are the same
	arr2 := []int{2, 2, 2, 2, 2}
	max2 := getMax(arr2, len(arr2))
	if max2 != 2 {
		t.Errorf("getMax(%v) = %d; want 2", arr2, max2)
	} else {
		t.Logf("TestGetMax_6034593ad3 test case 2 success")
	}

	// test case 3: negative numbers
	arr3 := []int{-1, -3, -2, -5, -4}
	max3 := getMax(arr3, len(arr3))
	if max3 != -1 {
		t.Errorf("getMax(%v) = %d; want -1", arr3, max3)
	} else {
		t.Logf("TestGetMax_6034593ad3 test case 3 success")
	}

	// test case 4: only one element
	arr4 := []int{5}
	max4 := getMax(arr4, len(arr4))
	if max4 != 5 {
		t.Errorf("getMax(%v) = %d; want 5", arr4, max4)
	} else {
		t.Logf("TestGetMax_6034593ad3 test case 4 success")
	}

	// test case 5: empty array
	arr5 := []int{}
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("getMax(%v) did not panic; want panic", arr5)
		} else {
			t.Logf("TestGetMax_6034593ad3 test case 5 success")
		}
	}()
	getMax(arr5, len(arr5))
}
