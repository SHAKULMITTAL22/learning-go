// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package QuickSort

import (
	"reflect"
	"testing"
)

func quickSortTest(arr []int, low int, high int) {
	if low < high {
		pi := partitionTest(arr, low, high)

		// Recursively sort elements before partition and after partition
		quickSortTest(arr, low, pi-1)
		quickSortTest(arr, pi+1, high)
	}
}

func partitionTest(arr []int, low int, high int) int {
	pivot := arr[high]
	i := (low - 1)

	for j := low; j <= high-1; j++ {
		if arr[j] < pivot {
			i++
			arr[i], arr[j] = arr[j], arr[i]
		}
	}
	arr[i+1], arr[high] = arr[high], arr[i+1]
	return (i + 1)
}

func TestQuickSort_97e0780ae7(t *testing.T) {
	tests := []struct {
		name string
		arr  []int
		want []int
	}{
		{
			name: "Test case 1: Testing with normal array",
			arr:  []int{10, 80, 30, 90, 40, 50, 70},
			want: []int{10, 30, 40, 50, 70, 80, 90},
		},
		{
			name: "Test case 2: Testing with array that contains negative numbers",
			arr:  []int{-10, 80, -30, 90, -40, 50, -70},
			want: []int{-70, -40, -30, -10, 50, 80, 90},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			quickSortTest(tt.arr, 0, len(tt.arr)-1)
			if !reflect.DeepEqual(tt.arr, tt.want) {
				t.Errorf("quickSortTest() = %v, want %v", tt.arr, tt.want)
			} else {
				t.Log("Success: TestQuickSort_97e0780ae7")
			}
		})
	}
}
