// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package QuickSort

import (
	"reflect"
	"testing"
)

// TestQuickSort_97e0780ae7 is a test function for the quickSort function
func TestQuickSort_97e0780ae7(t *testing.T) {
	// Test case 1: Normal case
	arr1 := []int{10, 80, 30, 90, 40, 50, 70}
	expected1 := []int{10, 30, 40, 50, 70, 80, 90}
	quickSort(arr1, 0, len(arr1)-1)
	if !reflect.DeepEqual(arr1, expected1) {
		t.Errorf("Test case 1 failed, expected %v, got %v", expected1, arr1)
	} else {
		t.Log("Test case 1 passed")
	}

	// Test case 2: Array is already sorted
	arr2 := []int{10, 20, 30, 40, 50}
	expected2 := []int{10, 20, 30, 40, 50}
	quickSort(arr2, 0, len(arr2)-1)
	if !reflect.DeepEqual(arr2, expected2) {
		t.Errorf("Test case 2 failed, expected %v, got %v", expected2, arr2)
	} else {
		t.Log("Test case 2 passed")
	}

	// Test case 3: Array is in reverse order
	arr3 := []int{50, 40, 30, 20, 10}
	expected3 := []int{10, 20, 30, 40, 50}
	quickSort(arr3, 0, len(arr3)-1)
	if !reflect.DeepEqual(arr3, expected3) {
		t.Errorf("Test case 3 failed, expected %v, got %v", expected3, arr3)
	} else {
		t.Log("Test case 3 passed")
	}

	// Test case 4: Array contains negative numbers
	arr4 := []int{-10, 20, -30, 40, -50}
	expected4 := []int{-50, -30, -10, 20, 40}
	quickSort(arr4, 0, len(arr4)-1)
	if !reflect.DeepEqual(arr4, expected4) {
		t.Errorf("Test case 4 failed, expected %v, got %v", expected4, arr4)
	} else {
		t.Log("Test case 4 passed")
	}

	// Test case 5: Array contains duplicate numbers
	arr5 := []int{10, 20, 20, 10, 30}
	expected5 := []int{10, 10, 20, 20, 30}
	quickSort(arr5, 0, len(arr5)-1)
	if !reflect.DeepEqual(arr5, expected5) {
		t.Errorf("Test case 5 failed, expected %v, got %v", expected5, arr5)
	} else {
		t.Log("Test case 5 passed")
	}
}
