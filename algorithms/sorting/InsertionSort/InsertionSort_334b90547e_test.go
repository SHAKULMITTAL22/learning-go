// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package InsertionSort

import (
	"reflect"
	"testing"
)

func TestInsertionSort_334b90547e(t *testing.T) {
	t.Run("Test with unsorted array", func(t *testing.T) {
		arr := []int{5, 2, 4, 6, 1, 3}
		expected := []int{1, 2, 3, 4, 5, 6}
		result := insertionSortTest(arr)

		if !reflect.DeepEqual(result, expected) {
			t.Errorf("Test failed, expected: '%v', got:  '%v'", expected, result)
		} else {
			t.Logf("Test passed, expected: '%v', got:  '%v'", expected, result)
		}
	})

	t.Run("Test with already sorted array", func(t *testing.T) {
		arr := []int{1, 2, 3, 4, 5, 6}
		expected := []int{1, 2, 3, 4, 5, 6}
		result := insertionSortTest(arr)

		if !reflect.DeepEqual(result, expected) {
			t.Errorf("Test failed, expected: '%v', got:  '%v'", expected, result)
		} else {
			t.Logf("Test passed, expected: '%v', got:  '%v'", expected, result)
		}
	})

	t.Run("Test with empty array", func(t *testing.T) {
		arr := []int{}
		expected := []int{}
		result := insertionSortTest(arr)

		if !reflect.DeepEqual(result, expected) {
			t.Errorf("Test failed, expected: '%v', got:  '%v'", expected, result)
		} else {
			t.Logf("Test passed, expected: '%v', got:  '%v'", expected, result)
		}
	})
}

func insertionSortTest(arr []int) []int {
	for i := 1; i < len(arr); i++ {
		for j := 0; j < i; j++ {
			if arr[j] > arr[i] {
				swapTest(arr, j, i)
			}
		}
	}

	return arr
}

func swapTest(arr []int, i, j int) {
	temp := arr[i]
	arr[i] = arr[j]
	arr[j] = temp
}
