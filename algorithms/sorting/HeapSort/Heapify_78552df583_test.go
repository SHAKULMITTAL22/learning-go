// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package HeapSort

import (
	"testing"
)

type Heap struct{}

func (heap *Heap) Left(i int) int {
	return 2*i + 1
}

func (heap *Heap) Right(i int) int {
	return 2*i + 2
}

func (heap *Heap) Heapify(array []int, root, length int) {
	var max = root
	var l, r = heap.Left(root), heap.Right(root)

	if l < length && array[l] > array[max] {
		max = l
	}

	if r < length && array[r] > array[max] {
		max = r
	}

	if max != root {
		array[root], array[max] = array[max], array[root]
		heap.Heapify(array, max, length)
	}
}

func TestHeapify(t *testing.T) {
	h := &Heap{}

	// Test Case 1: Testing with a valid unsorted array
	array := []int{3, 2, 1, 5, 6, 4}
	h.Heapify(array, 0, len(array))
	if !(array[0] > array[1] && array[0] > array[2]) {
		t.Log("Test Case 1: Testing with a valid unsorted array")
		t.Error("Expected the first element to be the largest. Got ", array[0])
	} else {
		t.Log("Test Case 1: Passed")
	}

	// Test Case 2: Testing with an array that is already a heap
	array = []int{6, 5, 4, 3, 2, 1}
	h.Heapify(array, 0, len(array))
	if !(array[0] > array[1] && array[0] > array[2]) {
		t.Log("Test Case 2: Testing with an array that is already a heap")
		t.Error("Expected the first element to be the largest. Got ", array[0])
	} else {
		t.Log("Test Case 2: Passed")
	}
}
