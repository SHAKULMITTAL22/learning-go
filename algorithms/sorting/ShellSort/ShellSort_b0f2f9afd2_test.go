// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package ShellSort

import (
	"reflect"
	"testing"
)

func TestShellSort_b0f2f9afd2(t *testing.T) {
	tests := []struct {
		name string
		arr  []int
		want []int
	}{
		{
			name: "Test 1: Normal scenario",
			arr:  []int{9, 8, 7, 6, 5, 4, 3, 2, 1},
			want: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
		},
		{
			name: "Test 2: Edge case with an empty array",
			arr:  []int{},
			want: []int{},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := shellSortTest(tt.arr); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("shellSortTest() = %v, want %v", got, tt.want)
			} else {
				t.Logf("Success! shellSortTest() = %v, want %v", got, tt.want)
			}
		})
	}
}

func shellSortTest(array []int) []int {
	length := len(array)

	// Copy the array so the passed one isn't affected
	arr := make([]int, length)
	copy(arr, array)

	// Start with a big gap and reduce it on every iteration
	for gap := int(length / 2); gap > 0; gap /= 2 {
		// Insertion sort for the gap
		for i := gap; i < length; i++ {
			// Shift elements from the gap
			for j := i; j >= gap && arr[j-gap] > arr[j]; j -= gap {
				arr[j], arr[j-gap] = arr[j-gap], arr[j]
			}
		}
	}

	return arr
}
