// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package SquareRoot

import (
	"math"
	"testing"
)

func TestSquareRoot(t *testing.T) {
	testCases := []struct {
		name  string
		input float64
		want  float64
	}{
		{
			name:  "Test for positive number",
			input: 16,
			want:  4,
		},
		{
			name:  "Test for zero",
			input: 0,
			want:  0,
		},
		{
			name:  "Test for negative number",
			input: -9,
			want:  -1,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := calculateSquareRoot(tc.input)

			if math.Abs(got-tc.want) > 1e-6 {
				t.Errorf("calculateSquareRoot(%f) = %f; want %f", tc.input, got, tc.want)
			} else {
				t.Logf("Test %s passed", tc.name)
			}
		})
	}
}

func calculateSquareRoot(num float64) float64 {
	// Method only supports positive integers
	if num < 0 {
		return -1
	}

	// Handle edge case square root of zero
	if num == 0 {
		return 0
	}

	// Set start values
	root := 1.0
	cur := 0.0

	// Find root
	for cur-root != 0 {
		root = applyNewtonMethod(root, num)
		cur = applyNewtonMethod(root, num)
	}

	return root
}

func applyNewtonMethod(x, num float64) float64 {
	return 0.5 * (x + num/x)
}
