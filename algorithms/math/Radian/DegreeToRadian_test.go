// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-dbrx using AI Type  and AI Model 

ROOST_METHOD_HASH=degreeToRadian_19ddfa9792
ROOST_METHOD_SIG_HASH=degreeToRadian_c38219c312

### Scenario 1: Conversion of 0 Degrees to Radians

Details:
- **Description**: This test checks the function's ability to correctly convert 0 degrees to radians, which should result in 0 radians.
- **Execution**:
  - **Arrange**: Prepare the input value of `0.0` degrees.
  - **Act**: Call `degreeToRadian` with `0.0` as the argument.
  - **Assert**: Verify that the result is `0.0`.
- **Validation**:
  - **Explanation**: Since 0 degrees is the starting point of the circle, it should convert directly to 0 radians.
  - **Importance**: Ensures basic correctness of the conversion function for the simplest case, confirming the base case is handled correctly.

### Scenario 2: Conversion of 90 Degrees to Radians

Details:
- **Description**: This test ensures that the function correctly converts 90 degrees to its equivalent in radians.
- **Execution**:
  - **Arrange**: Set up the input value of `90.0` degrees.
  - **Act**: Invoke `degreeToRadian` with `90.0`.
  - **Assert**: Check that the result is `math.Pi / 2`.
- **Validation**:
  - **Explanation**: 90 degrees corresponds to a quarter of a circle, which is `π/2` radians.
  - **Importance**: Verifies the function's accuracy for a common angle used in trigonometry.

### Scenario 3: Conversion of 180 Degrees to Radians

Details:
- **Description**: This test checks the conversion of 180 degrees, which should equal π radians.
- **Execution**:
  - **Arrange**: Use `180.0` degrees as the input.
  - **Act**: Call `degreeToRadian` with `180.0`.
  - **Assert**: Confirm the result is `math.Pi`.
- **Validation**:
  - **Explanation**: 180 degrees is half a circle, equating to π radians.
  - **Importance**: Ensures the function handles half-circle conversions correctly, which are critical in trigonometry.

### Scenario 4: Conversion of 360 Degrees to Radians

Details:
- **Description**: This test confirms that 360 degrees converts to 2π radians.
- **Execution**:
  - **Arrange**: Prepare the input of `360.0` degrees.
  - **Act**: Invoke `degreeToRadian` with `360.0`.
  - **Assert**: Validate that the result is `2 * math.Pi`.
- **Validation**:
  - **Explanation**: 360 degrees completes a full circle, equivalent to 2π radians.
  - **Importance**: Verifies full-circle conversions, crucial for cyclical calculations.

### Scenario 5: Conversion of Negative Degrees to Radians

Details:
- **Description**: This test checks the function's behavior with negative degree inputs.
- **Execution**:
  - **Arrange**: Use `-45.0` degrees as the input.
  - **Act**: Call `degreeToRadian` with `-45.0`.
  - **Assert**: Verify that the result is `-math.Pi / 4`.
- **Validation**:
  - **Explanation**: Negative angles should convert to negative radians, maintaining direction.
  - **Importance**: Confirms the function can handle negative inputs, important for scenarios involving rotational directions.

### Scenario 6: Conversion of Degrees Greater Than 360

Details:
- **Description**: This test examines the conversion of degrees exceeding a full circle.
- **Execution**:
  - **Arrange**: Input a value of `450.0` degrees.
  - **Act**: Invoke `degreeToRadian` with `450.0`.
  - **Assert**: Check that the result equals `2.5 * math.Pi`.
- **Validation**:
  - **Explanation**: Degrees beyond 360 should wrap around, with 450 degrees equating to a full circle plus a quarter (`2.5π` radians).
  - **Importance**: Ensures proper handling of angles greater than a full circle, relevant in applications involving rotations beyond 360 degrees.

### Scenario 7: Conversion of Small Decimal Degrees

Details:
- **Description**: This test checks the precision of the function for small decimal degree values.
- **Execution**:
  - **Arrange**: Prepare an input of `0.1` degrees.
  - **Act**: Call `degreeToRadian` with `0.1`.
  - **Assert**: Verify that the result is approximately `0.1 * math.Pi / 180`.
- **Validation**:
  - **Explanation**: Small decimal degrees should convert accurately to radians, reflecting precision.
  - **Importance**: Validates the function's precision, crucial for applications requiring high accuracy in angle measurements.

These scenarios aim to cover a broad range of use cases, ensuring that the `degreeToRadian` function handles normal operation, edge cases, and potential pitfalls effectively.
*/

// ********RoostGPT********
package Radian

import (
	"fmt"
	"math"
	"testing"
)

func TestDegreeToRadian(t *testing.T) {
	type testCase struct {
		degree   float64
		expected float64
	}

	// Ensure no duplicate test function names
	// Check if there is another test function with the same name and remove or rename it.

	testCases := []testCase{
		{degree: 0.0, expected: 0.0},                   // Scenario 1
		{degree: 90.0, expected: math.Pi / 2},          // Scenario 2
		{degree: 180.0, expected: math.Pi},             // Scenario 3
		{degree: 360.0, expected: 2 * math.Pi},         // Scenario 4
		{degree: -45.0, expected: -math.Pi / 4},        // Scenario 5
		{degree: 450.0, expected: 2.5 * math.Pi},       // Scenario 6
		{degree: 0.1, expected: 0.1 * math.Pi / 180},   // Scenario 7
	}

	for _, tc := range testCases {
		t.Run(fmt.Sprintf("degreeToRadian(%v)", tc.degree), func(t *testing.T) {
			result := degreeToRadian(tc.degree)
			if math.Abs(result-tc.expected) > 1e-9 {
				t.Logf("Test failed for degree: %v, expected: %v, got: %v", tc.degree, tc.expected, result)
				t.Fail()
			} else {
				t.Logf("Test succeeded for degree: %v, expected: %v, got: %v", tc.degree, tc.expected, result)
			}
		})
	}
}
