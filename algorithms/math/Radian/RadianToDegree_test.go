// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-dbrx using AI Type  and AI Model 

ROOST_METHOD_HASH=radianToDegree_5778708a96
ROOST_METHOD_SIG_HASH=radianToDegree_9d9fa92dd5

### Scenario 1: Convert Zero Radians to Degrees

Details:
  Description: This test checks the conversion of 0 radians to degrees. The expected result should be 0 degrees.
Execution:
  Arrange: Initialize a radian value of 0.
  Act: Call `radianToDegree(0)`.
  Assert: Check if the return value is 0.
Validation:
  The assertion checks if the function correctly returns 0 when provided with 0 radians. This test is crucial as it verifies the function's correctness for the baseline input of 0, ensuring that the function handles and returns the minimum possible value correctly.

### Scenario 2: Convert PI Radians to Degrees

Details:
  Description: This test ensures that the function correctly converts π radians to 180 degrees.
Execution:
  Arrange: Initialize a radian value of `math.Pi`.
  Act: Call `radianToDegree(math.Pi)`.
  Assert: Check if the return value is 180.
Validation:
  Given that π radians equal 180 degrees, this test confirms that the conversion formula is implemented correctly. This scenario is vital for validating the mathematical accuracy of the function.

### Scenario 3: Convert Negative Radian Value

Details:
  Description: This test checks the function's behavior when converting a negative radian value.
Execution:
  Arrange: Initialize a radian value of `-math.Pi`.
  Act: Call `radianToDegree(-math.Pi)`.
  Assert: Check if the return value is -180.
Validation:
  This test verifies that the function correctly handles negative values, which is important for applications requiring direction or orientation conversions, ensuring the function is robust across all real number inputs.

### Scenario 4: Convert 2PI Radians to Degrees

Details:
  Description: This test ensures that converting 2π radians results in 360 degrees, which represents a full circle.
Execution:
  Arrange: Initialize a radian value of `2 * math.Pi`.
  Act: Call `radianToDegree(2 * math.Pi)`.
  Assert: Check if the return value is 360.
Validation:
  This test is critical for confirming that the function can handle conversions that encapsulate a complete rotation, essential for systems dealing with rotational mechanics or angular measurements.

### Scenario 5: Convert Very Small Radian Value

Details:
  Description: Test the precision of the function when converting a very small radian value close to zero.
Execution:
  Arrange: Initialize a radian value of `1e-10`.
  Act: Call `radianToDegree(1e-10)`.
  Assert: Check if the return value is approximately `1e-10 * (180 / math.Pi)`.
Validation:
  This test checks the function's precision and accuracy with very small radian values, important for applications requiring high precision in angle conversions. The test ensures that the function is reliable across a broad range of inputs, including those that might be susceptible to floating-point arithmetic issues.

### Scenario 6: Convert Large Radian Value

Details:
  Description: Test the function's capability to handle and correctly convert very large radian values.
Execution:
  Arrange: Initialize a radian value significantly larger than 2π, such as `1000 * math.Pi`.
  Act: Call `radianToDegree(1000 * math.Pi)`.
  Assert: Check if the return value is `1000 * 180`.
Validation:
  This scenario tests the function's robustness and correctness over a range of large inputs, ensuring that the function remains accurate and stable even under extreme conditions. This is crucial for systems that may encounter large angular measurements or accumulations over time.
*/

// ********RoostGPT********
package Radian

import (
	"math"
	"testing"
)

// TestRadianToDegree tests the radianToDegree function with various test cases.
func TestRadianToDegree(t *testing.T) {
	tests := []struct {
		name     string
		radian   float64
		expected float64
	}{
		{
			name:     "Convert Zero Radians to Degrees",
			radian:   0,
			expected: 0,
		},
		{
			name:     "Convert PI Radians to Degrees",
			radian:   math.Pi,
			expected: 180,
		},
		{
			name:     "Convert Negative Radian Value",
			radian:   -math.Pi,
			expected: -180,
		},
		{
			name:     "Convert 2PI Radians to Degrees",
			radian:   2 * math.Pi,
			expected: 360,
		},
		{
			name:     "Convert Very Small Radian Value",
			radian:   1e-10,
			expected: 1e-10 * (180 / math.Pi),
		},
		{
			name:     "Convert Large Radian Value",
			radian:   1000 * math.Pi,
			expected: 1000 * 180,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := radianToDegree(tt.radian)
			if result != tt.expected {
				t.Errorf("radianToDegree(%v) = %v, want %v", tt.radian, result, tt.expected)
			} else {
				t.Logf("Success: %s, got %f for input %f", tt.name, result, tt.radian)
			}
		})
	}
}
