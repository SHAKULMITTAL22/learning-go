// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package Radian

import (
	"math"
	"testing"
)

func radianToDegreeTest(radian float64) float64 {
	return radian * (180 / math.Pi)
}

func TestRadianToDegree_9d9fa92dd5(t *testing.T) {
	// Test case 1: Testing with 0 radian
	radian := 0.0
	expectedDegree := 0.0
	degree := radianToDegreeTest(radian)
	if degree != expectedDegree {
		t.Errorf("TestRadianToDegree_9d9fa92dd5 failed, radian: %f, expected degree: %f, received degree: %f", radian, expectedDegree, degree)
	} else {
		t.Logf("TestRadianToDegree_9d9fa92dd5 success, radian: %f, expected degree: %f, received degree: %f", radian, expectedDegree, degree)
	}

	// Test case 2: Testing with pi radian
	radian = math.Pi
	expectedDegree = 180.0
	degree = radianToDegreeTest(radian)
	if degree != expectedDegree {
		t.Errorf("TestRadianToDegree_9d9fa92dd5 failed, radian: %f, expected degree: %f, received degree: %f", radian, expectedDegree, degree)
	} else {
		t.Logf("TestRadianToDegree_9d9fa92dd5 success, radian: %f, expected degree: %f, received degree: %f", radian, expectedDegree, degree)
	}

	// Test case 3: Testing with negative radian
	radian = -math.Pi
	expectedDegree = -180.0
	degree = radianToDegreeTest(radian)
	if degree != expectedDegree {
		t.Errorf("TestRadianToDegree_9d9fa92dd5 failed, radian: %f, expected degree: %f, received degree: %f", radian, expectedDegree, degree)
	} else {
		t.Logf("TestRadianToDegree_9d9fa92dd5 success, radian: %f, expected degree: %f, received degree: %f", radian, expectedDegree, degree)
	}
}
