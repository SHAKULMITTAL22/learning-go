// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package PrimalityTest

import (
	"math"
	"testing"
)

func checkPrime(num int) bool {
	s := math.Sqrt(float64(num))
	for i := 2; i <= int(s); i++ {
		if num%i == 0 {
			return false
		}
	}
	return num > 1
}

func TestCheckPrime_54426e0153(t *testing.T) {
	testCases := []struct {
		num      int
		expected bool
	}{
		{2, true},    // smallest prime number
		{3, true},    // another small prime number
		{4, false},   // small non-prime number
		{13, true},   // prime number
		{20, false},  // non-prime number
		{-1, false},  // negative number
		{0, false},   // zero
		{1, false},   // one
	}

	for _, testCase := range testCases {
		result := checkPrime(testCase.num)
		if result != testCase.expected {
			t.Errorf("checkPrime(%d) = %v; want %v", testCase.num, result, testCase.expected)
		} else {
			t.Logf("checkPrime(%d) = %v as expected", testCase.num, result)
		}
	}
}
