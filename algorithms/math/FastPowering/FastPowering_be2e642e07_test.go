// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package FastPowering

import (
	"math"
	"testing"
)

func TestFastPowering_be2e642e07(t *testing.T) {
	// Test case 1: base is 2 and power is 0, expected result is 1
	result := fastPoweringTest(2, 0)
	if result != 1 {
		t.Errorf("Test case 1 failed: fastPoweringTest(2, 0) = %f; want 1", result)
	} else {
		t.Logf("Test case 1 passed: fastPoweringTest(2, 0) = 1")
	}

	// Test case 2: base is 2 and power is 2, expected result is 4
	result = fastPoweringTest(2, 2)
	if result != 4 {
		t.Errorf("Test case 2 failed: fastPoweringTest(2, 2) = %f; want 4", result)
	} else {
		t.Logf("Test case 2 passed: fastPoweringTest(2, 2) = 4")
	}

	// Test case 3: base is 2 and power is 3, expected result is 8
	result = fastPoweringTest(2, 3)
	if result != 8 {
		t.Errorf("Test case 3 failed: fastPoweringTest(2, 3) = %f; want 8", result)
	} else {
		t.Logf("Test case 3 passed: fastPoweringTest(2, 3) = 8")
	}

	// Test case 4: base is 10 and power is 5, expected result is 100000
	result = fastPoweringTest(10, 5)
	if result != 100000 {
		t.Errorf("Test case 4 failed: fastPoweringTest(10, 5) = %f; want 100000", result)
	} else {
		t.Logf("Test case 4 passed: fastPoweringTest(10, 5) = 100000")
	}
}

func fastPoweringTest(base float64, power int) float64 {
	// Anything raised to the power of zero is 1
	if power == 0 {
		return 1
	}

	// Even powers are redefined via two smaller powers
	if power%2 == 0 {
		multiplier := fastPoweringTest(base, power/2)
		return multiplier * multiplier
	}

	// Odd powers
	multiplier := fastPoweringTest(base, int(math.Floor(float64(power/2))))
	return multiplier * multiplier * base
}
