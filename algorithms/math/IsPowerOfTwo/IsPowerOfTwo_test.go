// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-dbrx using AI Type  and AI Model 

ROOST_METHOD_HASH=isPowerOfTwo_fe7a80abf8
ROOST_METHOD_SIG_HASH=isPowerOfTwo_a909b954a6

### Scenario 1: Test with a number that is a power of two

Details:
  Description: This test checks if the function correctly identifies a number that is a power of two. A number is a power of two if it can be expressed as 2^n where n is an integer.
Execution:
  Arrange: Choose a number that is a known power of two, such as 8 (2^3).
  Act: Call `isPowerOfTwo` with the number 8.
  Assert: The function should return `true`.
Validation:
  The assertion for this test is straightforward since 8 is 2^3 and should return `true` when checked with `isPowerOfTwo`. This test is crucial as it validates the function's ability to correctly identify numbers that are powers of two, which is its primary purpose.

### Scenario 2: Test with a number that is not a power of two

Details:
  Description: This test verifies if the function can correctly identify a number that is not a power of two.
Execution:
  Arrange: Choose a number that is not a power of two, such as 7.
  Act: Call `isPowerOfTwo` with the number 7.
  Assert: The function should return `false`.
Validation:
  The chosen number, 7, cannot be expressed as 2^n for any integer n, so the expected output is `false`. This test is essential to ensure the function does not incorrectly classify non-power-of-two numbers as powers of two.

### Scenario 3: Test with zero

Details:
  Description: Test to verify that the function returns `false` when passed zero, as zero is not a power of two.
Execution:
  Arrange: Use the number 0.
  Act: Call `isPowerOfTwo` with the number 0.
  Assert: The function should return `false`.
Validation:
  Zero is not a power of two since there's no exponent n that satisfies 2^n = 0. Ensuring the function handles this edge case correctly is vital for its reliability.

### Scenario 4: Test with one

Details:
  Description: Test the function with the number one, which is technically 2^0, and should be considered a power of two.
Execution:
  Arrange: Use the number 1.
  Act: Call `isPowerOfTwo` with the number 1.
  Assert: The function should return `true`.
Validation:
  Since 1 is 2^0, it is a power of two, and the function should return `true`. This test confirms that the function handles this edge case correctly.

### Scenario 5: Test with a negative number

Details:
  Description: Ensure the function returns `false` when it is given a negative number, as negative numbers cannot be powers of two.
Execution:
  Arrange: Use a negative number, such as -2.
  Act: Call `isPowerOfTwo` with the number -2.
  Assert: The function should return `false`.
Validation:
  Negative numbers cannot be expressed as 2^n where n is an integer, thus the function must return `false`. This test is important to confirm that the function properly handles negative inputs.
*/

// ********RoostGPT********
package ispoweroftwo

import (
	"testing"
)

// isPowerOfTwo checks if a number is a power of two
func isPowerOfTwo(num int) bool {
	if num < 1 {
		return false
	}
	return (num & (num - 1)) == 0
}

// TestIsPowerOfTwo tests the isPowerOfTwo function with various scenarios.
func TestIsPowerOfTwo(t *testing.T) {
	tests := []struct {
		name     string
		input    int
		expected bool
	}{
		{
			name:     "Power of two (8)",
			input:    8,
			expected: true,
		},
		{
			name:     "Not a power of two (7)",
			input:    7,
			expected: false,
		},
		{
			name:     "Zero is not a power of two",
			input:    0,
			expected: false,
		},
		{
			name:     "One is a power of two (2^0)",
			input:    1,
			expected: true,
		},
		{
			name:     "Negative number (-2)",
			input:    -2,
			expected: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := isPowerOfTwo(tt.input)
			if result != tt.expected {
				t.Errorf("isPowerOfTwo(%d) = %v, expected %v", tt.input, result, tt.expected)
			} else {
				t.Logf("isPowerOfTwo(%d) = %v, as expected", tt.input, result)
			}
		})
	}
}
