// Test generated by RoostGPT for test math-go using AI Type Vertex AI and AI Model code-bison

package Fibonacci

import (
	"testing"
)

func TestFibonacci_3c2494e9fa(t *testing.T) {
	// Test case 1: n = 0
	expected := 0
	actual := fibonacci(0)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 2: n = 1
	expected = 1
	actual = fibonacci(1)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 3: n = 2
	expected = 1
	actual = fibonacci(2)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 4: n = 3
	expected = 2
	actual = fibonacci(3)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 5: n = 4
	expected = 3
	actual = fibonacci(4)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 6: n = 5
	expected = 5
	actual = fibonacci(5)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 7: n = 6
	expected = 8
	actual = fibonacci(6)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 8: n = 7
	expected = 13
	actual = fibonacci(7)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 9: n = 8
	expected = 21
	actual = fibonacci(8)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 10: n = 9
	expected = 34
	actual = fibonacci(9)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 11: n = 10
	expected = 55
	actual = fibonacci(10)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 12: n = -1
	expected = 0
	actual = fibonacci(-1)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 13: n = -2
	expected = 0
	actual = fibonacci(-2)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 14: n = -3
	expected = 0
	actual = fibonacci(-3)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 15: n = -4
	expected = 0
	actual = fibonacci(-4)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 16: n = -5
	expected = 0
	actual = fibonacci(-5)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 17: n = -6
	expected = 0
	actual = fibonacci(-6)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 18: n = -7
	expected = 0
	actual = fibonacci(-7)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 19: n = -8
	expected = 0
	actual = fibonacci(-8)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 20: n = -9
	expected = 0
	actual = fibonacci(-9)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}

	// Test case 21: n = -10
	expected = 0
	actual = fibonacci(-10)
	if actual != expected {
		t.Errorf("Expected %d, got %d", expected, actual)
	}
}
