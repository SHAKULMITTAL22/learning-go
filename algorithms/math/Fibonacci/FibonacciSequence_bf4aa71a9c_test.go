// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package Fibonacci

import (
	"reflect"
	"testing"
)

func TestFibonacciSequence_bf4aa71a9c(t *testing.T) {
	// Test case 1: Test with a positive number
	t.Run("Test with a positive number", func(t *testing.T) {
		got := fibonacciSequence(5)
		want := []int{0, 1, 1, 2, 3, 5}

		if !reflect.DeepEqual(got, want) {
			t.Errorf("fibonacciSequence(5) = %v; want %v", got, want)
		} else {
			t.Log("Test with a positive number passed")
		}
	})

	// Test case 2: Test with zero
	t.Run("Test with zero", func(t *testing.T) {
		got := fibonacciSequence(0)
		want := []int{0}

		if !reflect.DeepEqual(got, want) {
			t.Errorf("fibonacciSequence(0) = %v; want %v", got, want)
		} else {
			t.Log("Test with zero passed")
		}
	})

	// Test case 3: Test with a large number
	t.Run("Test with a large number", func(t *testing.T) {
		got := fibonacciSequence(10)
		want := []int{0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55}

		if !reflect.DeepEqual(got, want) {
			t.Errorf("fibonacciSequence(10) = %v; want %v", got, want)
		} else {
			t.Log("Test with a large number passed")
		}
	})

	// Test case 4: Test with a negative number
	t.Run("Test with a negative number", func(t *testing.T) {
		got := fibonacciSequence(-5)
		want := []int{}

		if !reflect.DeepEqual(got, want) {
			t.Errorf("fibonacciSequence(-5) = %v; want %v", got, want)
		} else {
			t.Log("Test with a negative number passed")
		}
	})
}
