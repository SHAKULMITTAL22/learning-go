// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package LinearSearch

import (
	"testing"
)

// TestLinearSearch_12fac2e721 is a test function for the linearSearch function
func TestLinearSearch_12fac2e721(t *testing.T) {
	// test case 1: query is present in the array
	arr1 := []int{1, 2, 3, 4, 5}
	query1 := 3
	expected1 := 2
	actual1 := linearSearch(arr1, query1)
	if actual1 != expected1 {
		t.Error("Test case 1 failed: expected", expected1, "but got", actual1)
	} else {
		t.Log("Test case 1 passed")
	}

	// test case 2: query is not present in the array
	arr2 := []int{1, 2, 3, 4, 5}
	query2 := 6
	expected2 := -1
	actual2 := linearSearch(arr2, query2)
	if actual2 != expected2 {
		t.Error("Test case 2 failed: expected", expected2, "but got", actual2)
	} else {
		t.Log("Test case 2 passed")
	}

	// test case 3: array is empty
	arr3 := []int{}
	query3 := 1
	expected3 := -1
	actual3 := linearSearch(arr3, query3)
	if actual3 != expected3 {
		t.Error("Test case 3 failed: expected", expected3, "but got", actual3)
	} else {
		t.Log("Test case 3 passed")
	}

	// test case 4: query is the first element of the array
	arr4 := []int{1, 2, 3, 4, 5}
	query4 := 1
	expected4 := 0
	actual4 := linearSearch(arr4, query4)
	if actual4 != expected4 {
		t.Error("Test case 4 failed: expected", expected4, "but got", actual4)
	} else {
		t.Log("Test case 4 passed")
	}

	// test case 5: query is the last element of the array
	arr5 := []int{1, 2, 3, 4, 5}
	query5 := 5
	expected5 := 4
	actual5 := linearSearch(arr5, query5)
	if actual5 != expected5 {
		t.Error("Test case 5 failed: expected", expected5, "but got", actual5)
	} else {
		t.Log("Test case 5 passed")
	}
}
