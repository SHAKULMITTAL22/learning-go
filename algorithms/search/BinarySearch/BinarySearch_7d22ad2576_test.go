// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package BinarySearch

import (
	"testing"
)

func TestBinarySearch_7d22ad2576(t *testing.T) {
	// Test case 1: Successful search
	arr1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	query1 := 7
	expectedResult1 := 6
	result1 := binarySearch(arr1, query1)
	if result1 != expectedResult1 {
		t.Errorf("Test case 1 failed! Expected %d, got %d", expectedResult1, result1)
	} else {
		t.Logf("Test case 1 successful! Expected %d, got %d", expectedResult1, result1)
	}

	// Test case 2: Unsuccessful search
	arr2 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	query2 := 11
	expectedResult2 := -1
	result2 := binarySearch(arr2, query2)
	if result2 != expectedResult2 {
		t.Errorf("Test case 2 failed! Expected %d, got %d", expectedResult2, result2)
	} else {
		t.Logf("Test case 2 successful! Expected %d, got %d", expectedResult2, result2)
	}

	// Test case 3: Edge case with smallest array
	arr3 := []int{1}
	query3 := 1
	expectedResult3 := 0
	result3 := binarySearch(arr3, query3)
	if result3 != expectedResult3 {
		t.Errorf("Test case 3 failed! Expected %d, got %d", expectedResult3, result3)
	} else {
		t.Logf("Test case 3 successful! Expected %d, got %d", expectedResult3, result3)
	}

	// Test case 4: Edge case with empty array
	arr4 := []int{}
	query4 := 1
	expectedResult4 := -1
	result4 := binarySearch(arr4, query4)
	if result4 != expectedResult4 {
		t.Errorf("Test case 4 failed! Expected %d, got %d", expectedResult4, result4)
	} else {
		t.Logf("Test case 4 successful! Expected %d, got %d", expectedResult4, result4)
	}
}
