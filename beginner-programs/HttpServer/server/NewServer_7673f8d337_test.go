// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package server

import (
    "net/http"
    "net/http/httptest"
    "testing"

    "github.com/gorilla/mux"
    "github.com/stretchr/testify/assert"
)

func TestNewServer(t *testing.T) {
    // The server should initialize correctly and return a handler without error.
    handler := NewServer()

    // Check that the server returned an http.Handler
    _, ok := handler.(http.Handler)
    assert.True(t, ok)

    // Use the httptest package to create a Request to send to our handlers
    request, err := http.NewRequest("GET", "/", nil)
    // Ensure there was no error in creating the request
    assert.Nil(t, err)

    // Use the httptest package to create a ResponseRecorder
    responseRecorder := httptest.NewRecorder()

    // Use the ServeHTTP method on our handler with our ResponseRecorder and Request to execute the test
    handler.ServeHTTP(responseRecorder, request)

    // Check that the status code is 200
    assert.Equal(t, 200, responseRecorder.Code)

    // Check that the response is as expected
    assert.Equal(t, "Hello, World!\n", responseRecorder.Body.String())

    // Test the '/hello/{name}' route
    // Use the httptest package to create a Request to send to our handlers
    request, err = http.NewRequest("GET", "/hello/john", nil)
    // Ensure there was no error in creating the request
    assert.Nil(t, err)

    // Use the httptest package to create a ResponseRecorder
    responseRecorder = httptest.NewRecorder()

    // Use the ServeHTTP method on our handler with our ResponseRecorder and Request to execute the test
    handler.ServeHTTP(responseRecorder, request)

    // Check that the status code is 200
    assert.Equal(t, 200, responseRecorder.Code)

    // Check that the response is as expected
    assert.Equal(t, "Hello, john!\n", responseRecorder.Body.String())
}
