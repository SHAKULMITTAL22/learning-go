// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package server_test

import (
	"net/http"
	"net/http/httptest"
	"testing"
	"fmt"
	"server"
)

func TestHelloHandler(t *testing.T) {
	tests := []struct {
		name       string
		req        *http.Request
		wantStatus int
		wantBody   string
	}{
		{
			name:       "Test name in URL parameters",
			req:        httptest.NewRequest(http.MethodGet, "/?name=John", nil),
			wantStatus: http.StatusOK,
			wantBody:   "Hello, John",
		},
		{
			name:       "Test default world",
			req:        httptest.NewRequest(http.MethodGet, "/", nil),
			wantStatus: http.StatusOK,
			wantBody:   "Hello, world",
		},
		{
			name:       "Test empty name",
			req:        httptest.NewRequest(http.MethodGet, "/?name=", nil),
			wantStatus: http.StatusOK,
			wantBody:   "Hello, ",
		},
		{
			name:       "Test null request",
			req:        nil,
			wantStatus: http.StatusBadRequest,
			wantBody:   "Invalid request",
		},
		{
			name:       "Test ResponseWriter null",
			req:        httptest.NewRequest(http.MethodGet, "/?name=John", nil),
			wantStatus: http.StatusInternalServerError,
			wantBody:   "Invalid response writer",
		},
		{
			name:       "Test large name",
			req:        httptest.NewRequest(http.MethodGet, "/?name=JohnJohnJohnJohnJohnJohnJohnJohnJohn", nil),
			wantStatus: http.StatusOK,
			wantBody:   "Hello, JohnJohnJohnJohnJohnJohnJohnJohnJohn",
		},
		{
			name:       "Test special characters",
			req:        httptest.NewRequest(http.MethodGet, "/?name=John%20Doe", nil),
			wantStatus: http.StatusOK,
			wantBody:   "Hello, John Doe",
		},
		{
			name:       "Test starts with whitespace",
			req:        httptest.NewRequest(http.MethodGet, "/?name=%20JohnDoe", nil),
			wantStatus: http.StatusOK,
			wantBody:   "Hello,  JohnDoe",
		},
		{
			name:       "Test numeric name",
			req:        httptest.NewRequest(http.MethodGet, "/?name=12345", nil),
			wantStatus: http.StatusOK,
			wantBody:   "Hello, 12345",
		},
		{
			name:       "Test null value name",
			req:        httptest.NewRequest(http.MethodGet, "/?name=null", nil),
			wantStatus: http.StatusOK,
			wantBody:   "Hello, world",
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			rr := httptest.NewRecorder()
			handler := http.HandlerFunc(server.HelloHandler)

			handler.ServeHTTP(rr, test.req)

			if status := rr.Code; status != test.wantStatus {
				t.Errorf("handler returned wrong status code: got %v want %v", status, test.wantStatus)
			}

			if rr.Body.String() != test.wantBody {
				t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), test.wantBody)
			}
		})
	}
}
