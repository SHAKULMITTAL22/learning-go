// ********RoostGPT********
/*
Test generated by RoostGPT for test grp-test-local using AI Type Open AI and AI Model gpt-4

Test generated by RoostGPT for test grp-test-local using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=DeleteBlog_a6edcf3dd6
ROOST_METHOD_SIG_HASH=DeleteBlog_a6edcf3dd6

```
Scenario 1: Valid Delete Request

Details:
    Description: This test scenario is meant to check the normal operation of the DeleteBlog endpoint. It should test whether a blog can be deleted successfully when provided with a valid blogId. The expected result is a DeleteBlogResponse with the status set to true.

Scenario 2: Invalid ObjectId Format for Delete Request

Details:
    Description: This test scenario is meant to check the error handling capability of the DeleteBlog endpoint when provided with an invalid ObjectId format. The expected result is an error message indicating the invalidity of the ObjectId.

Scenario 3: Non-Existent ObjectId for Delete Request

Details:
    Description: This test scenario is meant to test the error handling capability of the DeleteBlog endpoint when provided with a non-existent ObjectId. The expected result is an error message indicating that the blog with the provided ObjectId could not be found or deleted.

Scenario 4: Empty ObjectId for Delete Request

Details:
    Description: This test scenario is meant to check the error handling capability of the DeleteBlog endpoint when provided with an empty ObjectId. The expected result is an error message indicating the invalidity of the ObjectId.

Scenario 5: Null Context for Delete Request

Details:
    Description: This test scenario is meant to check the error handling capability of the DeleteBlog endpoint when provided with a null context. The expected result is an error message indicating the invalidity of the context.

Scenario 6: Delete Request During Server Shutdown

Details:
    Description: This test scenario is meant to check the error handling capability of the DeleteBlog endpoint during server shutdown. The expected result is an error message indicating that the server is not available.
```
*/

// ********RoostGPT********
package main

import (
	"context"
	"errors"
	"net"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/require"
	"github.com/tannergabriel/learning-go/beginner-programs/gRPC-CRUD/pb"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/grpc/test/bufconn"
)

const (
	bufSize = 1024 * 1024
)

var lis *bufconn.Listener

func init() {
	lis = bufconn.Listen(bufSize)
	s := grpc.NewServer()
	pb.RegisterBlogServiceServer(s, &server{})
	go func() {
		if err := s.Serve(lis); err != nil {
			log.Fatalf("Server exited with error: %v", err)
		}
	}()
}

func bufDialer(context.Context, string) (net.Conn, error) {
	return lis.Dial()
}

func TestDeleteBlog(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	tests := []struct {
		name     string
		blogID   string
		mockFunc func()
		wantErr  bool
		errStatus codes.Code
		errMsg   string
	}{
		{
			name:   "Valid Delete Request",
			blogID: primitive.NewObjectID().Hex(),
			mockFunc: func() {},
			wantErr: false,
		},
		{
			name:     "Invalid ObjectId Format for Delete Request",
			blogID:   "invalid-id",
			mockFunc: func() {},
			wantErr:  true,
			errStatus: codes.InvalidArgument,
			errMsg:   "Could not convert to ObjectId: encoding/hex: invalid byte: U+0069 'i'",
		},
		{
			name:     "Non-Existent ObjectId for Delete Request",
			blogID:   primitive.NewObjectID().Hex(),
			mockFunc: func() {},
			wantErr:  true,
			errStatus: codes.NotFound,
			errMsg:   "Could not find/delete blog with id",
		},
		{
			name:     "Empty ObjectId for Delete Request",
			blogID:   "",
			mockFunc: func() {},
			wantErr:  true,
			errStatus: codes.InvalidArgument,
			errMsg:   "Could not convert to ObjectId: encoding/hex: odd length hex string",
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			tc.mockFunc()
			ctx := context.Background()
			conn, err := grpc.DialContext(ctx, "bufnet", grpc.WithContextDialer(bufDialer), grpc.WithInsecure())
			if err != nil {
				t.Fatalf("Failed to dial bufnet: %v", err)
			}
			defer conn.Close()

			client := pb.NewBlogServiceClient(conn)
			req := &pb.DeleteBlogRequest{BlogId: tc.blogID}
			_, err = client.DeleteBlog(ctx, req)

			if tc.wantErr {
				require.Error(t, err)
				st, ok := status.FromError(err)
				require.True(t, ok)
				require.Equal(t, tc.errStatus, st.Code())
				require.Contains(t, st.Message(), tc.errMsg)
			} else {
				require.NoError(t, err)
			}
		})
	}
}
