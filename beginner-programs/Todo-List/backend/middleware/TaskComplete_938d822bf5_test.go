// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware

import (
	"bytes"
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"testing"

	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
	"github.com/tannergabriel/learning-go/beginner-programs/todo-list/backend/models"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func TestTaskComplete(t *testing.T) {

	var tests = []struct {
		input    string
		expected int64
	}{
		{"5f8d9f95b54764421b715b70", 1},
		{"invalid_id", 0},
		{"", 0},
		{"5f8d9f95b54764421b715b70", 0}, // concurrent request
		{"5f8d9f95b54764421b715b70", 0}, // already complete task
	}

	for _, test := range tests {
		result := bytes.NewBufferString("")
		log.SetOutput(result)
		log.SetFlags(0)
		log.Print("modified count: ", test.expected)

		id, _ := primitive.ObjectIDFromHex(test.input)
		filter := bson.M{"_id": id}
		update := bson.M{"$set": bson.M{"status": true}}

		n, _ := collection.UpdateOne(context.Background(), filter, update)

		t.Logf("TaskComplete with input %s", test.input)
		if n.ModifiedCount != test.expected {
			t.Errorf("Expected %d, but was %d", test.expected, n.ModifiedCount)
		}

		b := result.String()
		if b != fmt.Sprintf("modified count: %d\n", test.expected) {
			t.Errorf("Expected log to be %v, but was %v", test.expected, n.ModifiedCount)
		}
	}
}
