// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware

import (
	"context"
	"fmt"
	"os"
	"testing"

	"github.com/stretchr/testify/mock"
	"github.com/tannergabriel/learning-go/beginner-programs/todo-list/backend/models"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

type MockedCollection struct{
	mock.Mock
}

func (m *MockedCollection) DeleteOne(ctx context.Context, filter interface{}) (*mongo.DeleteResult, error) {
	args := m.Called(ctx, filter)
	
	return args.Get(0).(*mongo.DeleteResult), args.Error(1)
}

func TestDeleteOneTask(t *testing.T) {
	mockCollection := new(MockedCollection)

	collection = mockCollection // Assuming collection is a global variable

	testCases := []struct{
		name string
		taskID string
		mockReturn *mongo.DeleteResult
		mockError error
		expectedOutput string
	}{
		{
			name: "test delete one task valid",
			taskID: "60cb347debdb27c01f623887",
			mockReturn: &mongo.DeleteResult{DeletedCount:1},
			mockError: nil,
			expectedOutput: "Deleted Document 1\n",
		},
		{
			name: "test delete one task non hex task id",
			taskID: "nonHexString",
			mockReturn: nil,
			mockError: models.ErrInvalidHex,
			expectedOutput: "",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			filter := bson.M{"_id": tc.taskID}

			mockCollection.On("DeleteOne", context.Background(), filter).Return(tc.mockReturn, tc.mockError)

			r, w, _ := os.Pipe()

			os.Stdout = w

			deleteOneTask(tc.taskID)

			w.Close()

			out, _ := ioutil.ReadAll(r)

			if string(out) != tc.expectedOutput {
				t.Errorf("Expected output %v but got %v", tc.expectedOutput, string(out))
			}
		})
	}
}
