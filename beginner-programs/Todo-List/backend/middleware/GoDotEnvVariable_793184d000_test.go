// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware

import (
	"fmt"
	"os"
	"testing"

	"github.com/joho/godotenv"
)

func TestGoDotEnvVariable(t *testing.T) {
	// Mock functions from imported packages with pre-defined behavior    
	os.Getenv = func(key string) string {
		if key == "Exists" {
			return "ValueFromEnvFile"
		}
		return ""
	}

	godotenv.Load = func(filenames ...string) (err error) {
		for _, filename := range filenames {
			if filename == ".env" {
				return nil
			}
		}
		return fmt.Errorf("Error loading .env file")
	}
	
	// Table of test cases
	tests := []struct {
		name     string
		arg      string
		expected string
	}{
		{"ExistingVariable", "Exists", "ValueFromEnvFile"},
		{"NonExistingVariable", "NotExists", ""},
		{"EmptyKey", "", ""},
	}

	// Loop to execute test cases
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			// Capture the stdout
			rescueStdout := os.Stdout
			r, w, _ := os.Pipe()
			os.Stdout = w

			// Call function
			output := goDotEnvVariable(test.arg)

			// Restore the original stdout
			w.Close()
			out, _ := ioutil.ReadAll(r)
			os.Stdout = rescueStdout

			// Check if output is expected
			if output != test.expected || (test.expected == "" && string(out) != "Error loading .env file\n") {
				t.Errorf("Test %v - Expected %v , but got %v", test.name, test.expected, output)
			}
		})
	}
}
