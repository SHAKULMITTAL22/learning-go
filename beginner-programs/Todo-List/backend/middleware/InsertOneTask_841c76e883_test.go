// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware

import (
	"github.com/tannergabriel/learning-go/beginner-programs/todo-list/backend/models"
	"go.mongodb.org/mongo-driver/mongo"
	"testing"
)

// Mocking  the mongo collections
type mockMongoCollection struct {
	database *mongo.Database
	name     string
}

// Mocking the InsertOne function
func (mockCollection *mockMongoCollection) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {

	if document == nil {
		return nil, fmt.Errorf("document cannot be nil")
	}

	if doc, ok := document.(bson.D); ok {
		if _, err := doc.MarshalJSON(); err != nil {
			return nil, fmt.Errorf("can't marshal document to JSON")
		}
	}

	if str, ok := document.(string); ok && str == "Force error" {
		return nil, fmt.Errorf("forced error")
	}

	if str, ok := document.(string); ok && str == "Oversize error" {
		return nil, mongo.ErrBSONTooLarge
	}

	return &mongo.InsertOneResult{}, nil
}

func Test_insertOneTask(t *testing.T) {
	tests := []struct {
		name  string
		input models.ToDoList
		err   error
	}{
		{"Valid object", models.ToDoList{Task: "Test", Status: true}, nil},
		{"Empty Task", models.ToDoList{Task: "", Status: true}, nil},
		{"Force error", models.ToDoList{Task: "Force error", Status: true}, fmt.Errorf("forced error")},
		{"Object with null Status", models.ToDoList{Task: "Null Task"}, nil},
		{"Object with unexpected datatype", models.ToDoList{Task: 123, Status: "yes"}, fmt.Errorf("can't marshal document to JSON")},
		{"Duplicate id", models.ToDoList{ID: primitive.ObjectID{}, Task: "Test", Status: true}, nil},
		{"Oversize task", models.ToDoList{Task: "Oversize error", Status: true}, mongo.ErrBSONTooLarge},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			defer func() {
				r := recover()
				if (r != nil) != (test.err != nil) {
					t.Errorf("insertOneTask() recover = %v, wantErr %v", r, test.err)
				}
			}()
			insertOneTask(test.input)
		})
	}
}
