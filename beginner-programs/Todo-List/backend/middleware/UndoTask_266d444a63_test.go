// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gorilla/mux"
	"github.com/stretchr/testify/assert"
)

type mockResponseWriter struct {
	header     http.Header
	body       *bytes.Buffer
	statusCode int
}

func (r *mockResponseWriter) Header() http.Header {
	return r.header
}

func (r *mockResponseWriter) Write(b []byte) (int, error) {
	return r.body.Write(b)
}

func (r *mockResponseWriter) WriteHeader(statusCode int) {
	r.statusCode = statusCode
}

func NewMockResponseWriter() *mockResponseWriter {
	return &mockResponseWriter{
		header:     make(http.Header),
		body:       new(bytes.Buffer),
		statusCode: 200, 
	}
}

func TestUndoTask(t *testing.T) {
	testCases := []struct {
		name   string
		params map[string]string
		req    func() *http.Request
	}{
		{
			"With valid id",
			map[string]string{"id": "123"},
			func() *http.Request {
				req, _ := http.NewRequest("POST", "/test", nil)
				return req
			},
		},
		{
			"Without id",
			map[string]string{},
			func() *http.Request {
				req, _ := http.NewRequest("POST", "/test", nil)
				return req
			},
		},
	}

	originalVars := mux.Vars
	defer func() { mux.Vars = originalVars }()

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			mux.Vars = func(r *http.Request) map[string]string {
				return tc.params
			}
			w := NewMockResponseWriter()
			UndoTask(w, tc.req())

			assert.Equal(t, tc.params["id"], string(w.body.Bytes()))
			assert.Equal(t, http.StatusOK, w.statusCode)
		})
	}
}
