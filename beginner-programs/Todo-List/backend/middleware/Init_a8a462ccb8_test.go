// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware_test

import (
	"context"
	"strings"
	"testing"

	"github.com/tannergabriel/learning-go/beginner-programs/todo-list/backend/middleware"
	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)


const (
	testDBName       = "TestDB"
	testCollName     = "TestColl"
	testHost         = "localhost"
	incorrectHost    = "incorrect.host"
	invalidConnStr   = "mongodb://invalid:27017"
	correctConnStr   = "mongodb://localhost:27017"
	connSuccessMsg   = "Connected to MongoDB!"
	collSuccessMsg   = "Collection instance created!"
)


func TestDBConnection(t *testing.T) {
	tests := map[string]struct {
		host        string
		dbName      string
		collName    string
		expectPanic bool
	}{
		"Correct Connection":            {testHost, testDBName, testCollName, false},
		"Connection with Default Host":  {"", testDBName, testCollName, false},
		"Invalid Host":                  {incorrectHost, testDBName, testCollName, true},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			db, err := middleware.NewDB(test.host, test.dbName, test.collName)
			if (err != nil) != test.expectPanic {
				t.Fatalf("expected panic: %v, got: %v, error: %v", test.expectPanic, (err != nil), err)
			}
			if err == nil {
				defer db.Close()
			}
		})
	}
}

func TestPingDB(t *testing.T) {
	db, _ := middleware.NewDB(testHost, testDBName, testCollName)
	defer db.Close()

	err := db.Ping()
	if err != nil {
		t.Fatalf("expected no error, got: %v", err)
	}
}

func TestConnectivityError(t *testing.T) {
	db, err := middleware.NewDB(invalidConnStr, testDBName, testCollName)
	if err == nil {
		t.Fatalf("expected error, got: nil")
	}
	if !strings.Contains(err.Error(), "unable to connect") {
		t.Fatalf("expected error containing 'unable to connect', got: %v", err)
	}
}

func TestCreateCollection(t *testing.T) {
	db, _ := middleware.NewDB(testHost, testDBName, testCollName)
	defer db.Close()

	coll, err := db.CreateCollection(testCollName)
	if err != nil {
		t.Fatalf("expected no error, got: %v", err)
	}
	if coll == nil {
		t.Fatalf("expected a collection, got: nil")
	}
}

func TestPrints(t *testing.T) {
	tests := map[string]struct {
		fn         func() error
		wantMsg    string
	}{
		"Print MongoDB Connection":     {middleware.PrintConnectedToMongoDB, connSuccessMsg},
		"Print Collection Creation":    {middleware.PrintCollectionInstanceCreated, collSuccessMsg},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			msg, err := test.fn()
			if err != nil {
				t.Fatalf("expected no error, got: %v", err)
			}
			if msg != test.wantMsg {
				t.Fatalf("expected message '%s', got: '%s'", test.wantMsg, msg)
			}
		})
	}
}

func TestSelectDB(t *testing.T) {
	db, _ := middleware.NewDB(testHost, testDBName, testCollName)
	defer db.Close()

	selectedDB := db.Name()
	if selectedDB != testDBName {
		t.Fatalf("expected db name '%s', got: '%s'", testDBName, selectedDB)
	}
}

func TestSelectColl(t *testing.T) {
	db, _ := middleware.NewDB(testHost, testDBName, testCollName)
	defer db.Close()

	coll, _ := db.CreateCollection(testCollName)
	selectedColl := coll.Name()
	if selectedColl != testCollName {
		t.Fatalf("expected coll name '%s', got: '%s'", testCollName, selectedColl)
	}
}
