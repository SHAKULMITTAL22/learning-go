// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware_test

import (
	"bytes"
	"context"
	"log"
	"os"
	"testing"

	"github.com/tannergabriel/learning-go/beginner-programs/todo-list/backend/middleware"
	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func TestInit(t *testing.T) {
	testCases := []struct {
		name              string
		host              string
		hasMongoError     bool
		hasPingError      bool
		hasInvalidDBName  bool
		hasInvalidCollName bool
		expectedOutput    string
	}{
		{"HOST not set", "", false, false, false, false, "mongodb://localhost:27017\nConnected to MongoDB!\nCollection instance created!\n"},
		{"HOST set", "mongodb0.example.com", false, false, false, false, "mongodb://mongodb0.example.com:27017\nConnected to MongoDB!\nCollection instance created!\n"},
		{"Mongo Connect Error", "mongodb0.example.com", true, false, false, false, ""},
		{"Ping Error", "mongodb0.example.com", false, true, false, false, ""},
		{"DB and Collection Valid", "mongodb0.example.com", false, false, false, false, "mongodb://mongodb0.example.com:27017\nConnected to MongoDB!\nCollection instance created!\n"},
		{"DB Invalid", "mongodb0.example.com", false, false, true, false, ""},
		{"Collection Invalid", "mongodb0.example.com", false, false, false, true, ""},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {

			// Set HOST env variable
			os.Setenv("HOST", tc.host)
			oldApplyURI := options.Client().ApplyURI

			options.Client().ApplyURI = func(connectionString string) *options.ClientOptions {
				return oldApplyURI(tc.name + ":" + tc.host)
			}

			// Redirect output
			output := new(bytes.Buffer)
			log.SetOutput(output)

			middleware.Init()

			if output.String() != tc.expectedOutput {
				t.Errorf("Expected %s but got %s", tc.expectedOutput, output.String())
			}
		})
	}
}
