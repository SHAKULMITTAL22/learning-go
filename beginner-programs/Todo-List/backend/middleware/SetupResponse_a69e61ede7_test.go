// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware_test

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/tannergabriel/learning-go/beginner-programs/todo-list/backend/middleware"
)

func TestSetupResponse(t *testing.T) {
	tests := []struct {
		name                string
		existingHeaders     http.Header
		expectedHeaders     http.Header
	}{
		{
			name:                "Test setting up headers",
			existingHeaders:     http.Header{},
			expectedHeaders:     http.Header{
				"Access-Control-Allow-Origin":  []string{"*"},
				"Access-Control-Allow-Methods": []string{"POST, GET, OPTIONS, PUT, DELETE"},
				"Access-Control-Allow-Headers": []string{"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization"},
			},
		},
		{
			name: "Test existing header preservation",
			existingHeaders: http.Header{
				"Existing-Header": []string{"existing-value"},
			},
			expectedHeaders:   http.Header{
				"Access-Control-Allow-Origin":  []string{"*"},
				"Access-Control-Allow-Methods": []string{"POST, GET, OPTIONS, PUT, DELETE"},
				"Access-Control-Allow-Headers": []string{"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization"},
				"Existing-Header":              []string{"existing-value"},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			w := httptest.NewRecorder()
			w.Header() = tt.existingHeaders // set initial headers to the one given in the test scenario

			req := httptest.NewRequest("GET", "http://test.com", nil)
			middleware.SetupResponse(w, req)
			for k, v := range tt.expectedHeaders {
				// will return "" if header is not set
				if w.Header().Get(k) != v[0] {
					t.Errorf("http header '%s' was incorrect. got: %s, want: %s", k, w.Header().Get(k),v[0])
				}
			}    
		})
	}
}

func TestSetupResponse_withNil(t *testing.T) {
	var w http.ResponseWriter 
	req := &http.Request{}
	defer func() {
		if r := recover(); r != nil {
			t.Errorf("The code panicked, likely due to nil http.ResponseWriter")
		}
	}()
	middleware.SetupResponse(w, req)
}

