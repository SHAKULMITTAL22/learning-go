// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package middleware

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestSetupResponse(t *testing.T) {
	tests := []struct {
		name           string
		existingHeader http.Header
	}{
		{name: "Empty header", existingHeader: http.Header{}},
		{name: "Existing header", existingHeader: http.Header{"Existing-Key": []string{"Existing-Value"}}},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			req, err := http.NewRequest("GET", "/dummy_url", nil)
			if err != nil {
				t.Fatal(err)
			}

			rr := httptest.NewRecorder()
			rr.HeaderMap = tt.existingHeader
			setupResponse(rr, req)

			checkHeader(t, rr, "Access-Control-Allow-Origin", "*")
			checkHeader(t, rr, "Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
			checkHeader(t, rr, "Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")

			// Check existing headers are not overwritten
			if tt.existingHeader.Get("Existing-Key") != "Existing-Value" {
				t.Errorf("setupResponse altered existing headers: got %v, wanted 'Existing-Value'", tt.existingHeader.Get("Existing-Key"))
			}
		})
	}
}

func checkHeader(t *testing.T, rr *httptest.ResponseRecorder, key, want string) {
	t.Helper()
	if got := rr.Header().Get(key); got != want {
		t.Errorf("setupResponse() = %s; want %s", got, want)
	}
}
