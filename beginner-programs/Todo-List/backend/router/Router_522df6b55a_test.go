// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package router

import (
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/gorilla/mux"
	"github.com/stretchr/testify/assert"
)

type middlewareFunc func(http.ResponseWriter, *http.Request)

func TestRouter(t *testing.T) {
	router := Router()
	assert.NotNil(t, router, "Expect router to be constructed")
}

func TestEndpointsRequest(t *testing.T) {
	testCases := []struct {
		desc           string
		url            string
		method         string
		middlewareFunc middlewareFunc
		expectedOutput string
	}{
		{"Testing GET /todo", "/todo", "GET", middleware.GetAllTask, "All Tasks"},
		{"Testing POST /todo", "/todo", "POST", middleware.CreateTask, "Create Task"},
		{"Testing PUT /todo/{id}", "/todo/1", "PUT", middleware.TaskComplete, "Task Completed"},
		{"Testing PUT /todo/undoTask/{id}", "/todo/undoTask/1", "PUT", middleware.UndoTask, "Undo Task"},
		{"Testing DELETE /todo/deleteTask/{id}", "/todo/deleteTask/1", "DELETE", middleware.DeleteTask, "Task Deleted"},
		{"Testing DELETE /todo", "/todo", "DELETE", middleware.DeleteAllTask, "All Tasks Deleted"},
	}

	router := Router()
	for _, tc := range testCases {
		t.Run(tc.desc, func(t *testing.T) {
			// Create a test request
			req, err := http.NewRequest(tc.method, tc.url, strings.NewReader(tc.method))
			if err != nil {
				t.Fatalf("Failed to create test request: %v", err)
			}

			// Test response recorder
			rr := httptest.NewRecorder()

			// Invoke handler function via router
			router.ServeHTTP(rr, req)

			// Assert success
			assert.Equal(t, rr.Body.String(), tc.expectedOutput, tc.desc)
		})
	}
}

func TestStatusCodes(t *testing.T) {
	// Test case setup
	tests := []struct {
		url    string
		method string
		code   int
	}{
		{"/todo", "GET", http.StatusOK},
		{"/todo", "POST", http.StatusOK},
		{"/todo/1", "PUT", http.StatusOK},
		{"/todo/undoTask/1", "PUT", http.StatusOK},
		{"/todo/deleteTask/1", "DELETE", http.StatusOK},
		{"/todo", "DELETE", http.StatusOK},
	}

	// Setting up router
	router := Router()

	// Running tests
	for _, tt := range tests {
		req, _ := http.NewRequest(tt.method, tt.url, nil)
		rr := httptest.NewRecorder()

		router.ServeHTTP(rr, req)

		if status := rr.Code; status != tt.code {
			t.Errorf("Expected Status Code: %v, Got : %v", tt.code, status)
		}
	}
}
