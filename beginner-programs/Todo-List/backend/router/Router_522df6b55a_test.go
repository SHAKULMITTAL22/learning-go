// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package router_test

import (
	"bytes"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	mw "github.com/tannergabriel/learning-go/beginner-programs/todo-list/backend/middleware"
	router "github.com/tannergabriel/learning-go/beginner-programs/todo-list/backend/router"
)

// TestRouter is a test function for testing the router
func TestRouter(t *testing.T) {
	tests := []struct {
		method      string
		path        string
		status      int
		middleware  string
		description string
	}{
		{"GET", "/todo", http.StatusOK, "GetAllTask", "Test GET /todo"},
		{"OPTIONS", "/todo", http.StatusOK, "GetAllTask", "Test OPTIONS /todo"},
		{"POST", "/todo", http.StatusCreated, "CreateTask", "Test POST /todo"},
		{"OPTIONS", "/todo", http.StatusOK, "CreateTask", "Test OPTIONS /todo for POST method"},
		{"PUT", "/todo/1", http.StatusOK, "TaskComplete", "Test PUT /todo/{id}"},
		{"OPTIONS", "/todo/1", http.StatusOK, "TaskComplete", "Test OPTIONS /todo/{id} for PUT method"},
		{"PUT", "/todo/undoTask/1", http.StatusOK, "UndoTask", "Test PUT /todo/undoTask/{id}"},
		{"OPTIONS", "/todo/undoTask/1", http.StatusOK, "UndoTask", "Test OPTIONS /todo/undoTask/{id} for PUT method"},
		{"DELETE", "/todo/deleteTask/1", http.StatusNoContent, "DeleteTask", "Test DELETE /todo/deleteTask/{id}"},
		{"OPTIONS", "/todo/deleteTask/1", http.StatusOK, "DeleteTask", "Test OPTIONS /todo/deleteTask/{id} for DELETE"},
		{"DELETE", "/todo", http.StatusNoContent, "DeleteAllTask", "Test DELETE /todo"},
		{"OPTIONS", "/todo", http.StatusOK, "DeleteAllTask", "Test OPTIONS /todo for DELETE method"},
	}
	// create router
	r := router.Router()

	for _, tc := range tests {
		req, err := http.NewRequest(tc.method, fmt.Sprintf("http://localhost:8080%s", tc.path), nil)
		if err != nil {
			t.Fatalf("Could not create HTTP request: %v", err)
		}

		resp := httptest.NewRecorder()
		nextCalled := false

		switch tc.middleware {
		case "GetAllTask":
			mw.GetAllTask = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				nextCalled = true
			})
		case "CreateTask":
			mw.CreateTask = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				nextCalled = true
			})
		case "TaskComplete":
			mw.TaskComplete = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				nextCalled = true
			})
		case "UndoTask":
			mw.UndoTask = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				nextCalled = true
			})
		case "DeleteTask":
			mw.DeleteTask = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				nextCalled = true
			})
		case "DeleteAllTask":
			mw.DeleteAllTask = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
				nextCalled = true
			})
		}

		r.ServeHTTP(resp, req)

		if resp.Code != tc.status {
			t.Errorf("%s: Expected response code %v got %v", tc.description, tc.status, resp.Code)
		}
		if !nextCalled {
			t.Errorf("%s: expected next to be called", tc.description)
		}
	}
}

func TestRouter_invalid(t *testing.T) {
	tests := []struct {
		method     string
		path       string
		status     int
	}{
		{"GET", "/invalid", http.StatusNotFound},
		{"INVALID", "/todo", http.StatusMethodNotAllowed},
	}
	r := router.Router()
	for _, tc := range tests {
		req, err := http.NewRequest(tc.method, fmt.Sprintf("http://localhost:8080%s", tc.path), nil)
		if err != nil {
			t.Fatalf("Could not create HTTP request: %v", err)
		}

		resp := httptest.NewRecorder()
		r.ServeHTTP(resp, req)

		if resp.Code != tc.status {
			t.Errorf("%s: Expected response code %v got %v", tc.description, tc.status, resp.Code)
		}
	}
}
