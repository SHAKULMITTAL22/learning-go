// ********RoostGPT********
// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
package main

import (
	"regexp"
	"testing"
)

func TestGeneratePasswordNormal(t *testing.T) {
	length := 8
	password := generatePassword(length)
	if len(password) != length {
		t.Errorf("Expected password of length %d, got %d", length, len(password))
	}
	matched, _ := regexp.MatchString("[0-9]", password)
	if !matched {
		t.Error("Password does not contain at least one digit")
	}
	matched, _ = regexp.MatchString("[~=+%^*/()[]{}/!@#$?|]", password)
	if !matched {
		t.Error("Password does not contain at least one special character")
	}
}

func TestGeneratePasswordZeroLength(t *testing.T) {
	length := 0
	password := generatePassword(length)
	if password != "" {
		t.Errorf("Expected empty password for zero length, got: %s", password)
	}
}

func TestGeneratePasswordNegativeLength(t *testing.T) {
	length := -1
	password := generatePassword(length)
	if len(password) != 0 {
		t.Errorf("Expected empty password for negative length, got: %s", password)
	}
}

func TestGeneratePasswordPredictability(t *testing.T) {
	length := 8
	password1 := generatePassword(length)
	password2 := generatePassword(length)
	if password1 == password2 {
		t.Error("Generated passwords are identical, password generation is predictable")
	}
}

