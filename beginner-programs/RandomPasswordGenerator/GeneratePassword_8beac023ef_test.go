// ********RoostGPT********
/*
Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

================================VULNERABILITIES================================
Vulnerability:Insufficient Entropy in Random Numbers Generation
Issue: The function uses math/rand for password generation, which isn't safe for cryptographic operations. An attacker could predict the output of math/rand and consequently guess generated passwords.
Solution: Replace math/rand with crypto/rand, which is safe for cryptographic operations in Go. Also, consider using a library dedicated to password generation to ensure security.

Vulnerability:Weak Password Policy
Issue: The function generates a password with at least one digit and one special character, but there's no guarantee of uppercase or lowercase letter inclusion. This makes the password less complex and easier to crack.
Solution: Improve the password policy to ensure it contains at least one uppercase letter, one lowercase letter, one digit, and one special character. This will increase the complexity of the generated password, making it harder to crack.

================================================================================
1. Scenario: Password Length
Test that the length of the password generated is equal to the length specified in the function argument.

2. Scenario: Contains Digits
Test that the generated password contains at least one digit. This is because the function is designed to ensure that at least one digit is included in the password.

3. Scenario: Contains Special Characters
Test that the generated password contains at least one special character. This is because the function is designed to ensure that at least one special character is included in the password.

4. Scenario: Contains Alphabets
Test that the generated password contains at least one alphabet character. This is because the function is designed to include alphabet characters in the password.

5. Scenario: Randomness
Test that the generated passwords are not the same when the function is called multiple times with the same length argument. This is to ensure that the password generated is random.

6. Scenario: Negative Length
Test how the function behaves when a negative integer is passed as the length argument. The expected behavior should be defined and the function should handle this edge case appropriately.

7. Scenario: Zero Length
Test how the function behaves when zero is passed as the length argument. The expected behavior should be defined and the function should handle this edge case appropriately.

8. Scenario: Non-integer Length
Test how the function behaves when a non-integer is passed as the length argument. The expected behavior should be defined and the function should handle this edge case appropriately.
*/

// ********RoostGPT********
package main

import (
	"fmt"
	"math/rand"
	"testing"
	"time"
	"unicode"
)

// TestGeneratePassword_8beac023ef is the unit test for the generatePassword function.
func TestGeneratePassword_8beac023ef(t *testing.T) {
	rand.Seed(time.Now().UnixNano())

	tests := []struct {
		name   string
		length int
	}{
		{"Password Length", 10},
		{"Contains Digits", 10},
		{"Contains Special Characters", 10},
		{"Contains Alphabets", 10},
		{"Randomness", 10},
		{"Negative Length", -1},
		{"Zero Length", 0},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			password := generatePassword(tt.length)

			switch tt.name {
			case "Password Length":
				if len(password) != tt.length {
					t.Errorf("Password length got = %d, want = %d", len(password), tt.length)
				}
			case "Contains Digits":
				if !containsAny(password, "0123456789") {
					t.Error("Password should contain at least one digit")
				}
			case "Contains Special Characters":
				if !containsAny(password, "~=+%^*/()[]{}/!@#$?|") {
					t.Error("Password should contain at least one special character")
				}
			case "Contains Alphabets":
				if !containsAny(password, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") {
					t.Error("Password should contain at least one alphabet character")
				}
			case "Randomness":
				password2 := generatePassword(tt.length)
				if password == password2 {
					t.Error("Generated passwords should be random and not the same")
				}
			case "Negative Length", "Zero Length":
				if len(password) != 0 {
					t.Error("Password length should be zero for negative or zero length argument")
				}
			default:
				t.Error("Invalid test scenario")
			}
		})
	}
}

// containsAny checks if str contains any character from chars.
func containsAny(str, chars string) bool {
	for _, c := range str {
		if unicode.IsOneOf([]*unicode.RangeTable{unicode.Letter, unicode.Digit}, c) {
			return true
		}
	}
	return false
}
