// Test generated by RoostGPT for test roost-test using AI Type Vertex AI and AI Model code-bison-32k

package main

import (
	"context"
	"fmt"
	"log"
	"testing"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func TestInsertMultipleUsers_facc2af5a8(t *testing.T) {
	// Create a new MongoClient and connect to the database
	client, err := mongo.Connect(context.TODO(), options.Client().ApplyURI("mongodb://localhost:27017"))
	if err != nil {
		t.Error("Error connecting to the database:", err)
		return
	}

	// Get the collection we want to insert the documents into
	collection := client.Database("test").Collection("users")

	// Create a slice of users to insert
	users := []interface{}{
		bson.M{"name": "John Doe", "age": 30},
		bson.M{"name": "Jane Doe", "age": 25},
	}

	// Call the insertMultipleUsers function
	insertMultipleUsers(collection, users)

	// Check the result of the insert operation
	insertManyResult, err := collection.InsertMany(context.TODO(), users)
	if err != nil {
		t.Error("Error inserting documents:", err)
		return
	}

	// Print the inserted document IDs
	fmt.Println("Inserted multiple documents: ", insertManyResult.InsertedIDs)

	// Test that the documents were inserted correctly
	for _, id := range insertManyResult.InsertedIDs {
		var user bson.M
		err := collection.FindOne(context.TODO(), bson.M{"_id": id}).Decode(&user)
		if err != nil {
			t.Error("Error finding inserted document:", err)
			return
		}

		// Check that the document has the expected values
		if user["name"] != "John Doe" || user["age"] != 30 {
			t.Errorf("Inserted document does not have the expected values: %v", user)
			return
		}
	}

	// Test that the function returns an error if the collection is nil
	err = insertMultipleUsers(nil, users)
	if err == nil {
		t.Error("Expected error when passing a nil collection")
	}

	// Test that the function returns an error if the users slice is nil
	err = insertMultipleUsers(collection, nil)
	if err == nil {
		t.Error("Expected error when passing a nil users slice")
	}

	// Test that the function returns an error if the users slice is empty
	err = insertMultipleUsers(collection, []interface{}{})
	if err == nil {
		t.Error("Expected error when passing an empty users slice")
	}
}
