// Test generated by RoostGPT for test roost-test using AI Type Vertex AI and AI Model codechat-bison-32k

 package main

import (
	"context"
	"fmt"
	"log"
	"testing"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type User struct {
	Name string
	Age  int
	Email string
}

func insertUser(collection *mongo.Collection, user User) {
	insertResult, err := collection.InsertOne(context.TODO(), user)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Inserted a single document: ", insertResult.InsertedID)
}

func insertMultipleUsers(collection *mongo.Collection, users []interface{}) {
	insertManyResult, err := collection.InsertMany(context.TODO(), users)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Inserted multiple documents: ", insertManyResult.InsertedIDs)
}

func updateUser(collection *mongo.Collection, user User, newName string) {
	updateResult, err := collection.UpdateOne(
		context.TODO(),
		bson.M{"name": user.Name},
		bson.M{"$set": bson.M{"name": newName}},
	)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Updated a single document: ", updateResult.ModifiedCount)
}

func findUser(collection *mongo.Collection, name string) {
	var user User
	err := collection.FindOne(context.TODO(), bson.M{"name": name}).Decode(&user)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Found a single document: ", user)
}

func findAllUsers(collection *mongo.Collection) {
	cursor, err := collection.Find(context.TODO(), bson.D{})
	if err != nil {
		log.Fatal(err)
	}

	var users []User
	for cursor.Next(context.TODO()) {
		var user User
		err := cursor.Decode(&user)
		if err != nil {
			log.Fatal(err)
		}

		users = append(users, user)
	}

	if err := cursor.Err(); err != nil {
		log.Fatal(err)
	}

	cursor.Close(context.TODO())

	fmt.Println("Found multiple documents: ", users)
}

func deleteAllUsers(collection *mongo.Collection) {
	deleteResult, err := collection.DeleteMany(context.TODO(), bson.D{})
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Deleted all documents: ", deleteResult.DeletedCount)
}

func TestMain_a2e85e6415(t *testing.T) {
	clientOptions := options.Client().ApplyURI("mongodb://localhost:27017")

	client, err := mongo.Connect(context.TODO(), clientOptions)
	if err != nil {
		t.Error(err)
	}

	err = client.Ping(context.TODO(), nil)
	if err != nil {
		t.Error(err)
	}

	t.Log("Connected to MongoDB!")

	collection := client.Database("test").Collection("users")

	john := User{"John", 20, "johndoe@test.com"}
	maria := User{"Maria", 10, "maria@test.com"}
	brock := User{"Brock", 15, "brock@example.com"}

	insertUser(collection, john)
	t.Log("Inserted a single document: ", john)

	users := []interface{}{maria, brock}
	insertMultipleUsers(collection, users)
	t.Log("Inserted multiple documents: ", users)

	updateUser(collection, maria, "John")
	t.Log("Updated a single document: ", maria)

	findUser(collection, "Maria")
	t.Log("Found a single document: ", maria)

	findAllUsers(collection)
	t.Log("Found multiple documents: ", users)

	deleteAllUsers(collection)
	t.Log("Deleted all documents: ", users)

	err = client.Disconnect(context.TODO())

	if err != nil {
		t.Error(err)
	} else {
		t.Log("Connection to MongoDB closed.")
	}
}