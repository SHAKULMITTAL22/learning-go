// Test generated by the assistant

package graph

import (
	"context"
	"testing"

	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/domain"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/mock"
)

// TestDelete_a20a9b6fe4 validates the mutationResolver.Delete method
func TestDelete_a20a9b6fe4(t *testing.T) {
	// Create a mock database to interact with
	mockDB := new(mock.Database)

	// Setup mock database return values
	mockDB.On("First", &domain.Item{}, 1).Return(&domain.Item{Title: "Test Item"}, nil)
	mockDB.On("Delete", &domain.Item{Title: "Test Item"}).Return(nil)

	// Initialize the resolver with mock database
	r := mutationResolver{DB: mockDB}

	// Case 1: Item exists and should be deleted
	{
		// TODO: Replace with real scenario context
		ctx := context.Background()

		result, err := r.Delete(ctx, 1)
		if err != nil {
			t.Errorf("Delete(1) returned error: %v", err)
		}

		if result != "Item successfully deleted" {
			t.Errorf("Delete(1) returned unexpected message: %s", result)
		}

		// Log success
		t.Log("Delete(1) passed")
	}

	// Case 2: No item exists with provided ID
	{
		// TODO: Replace with real scenario context
		ctx := context.Background()

		// Setup mock database return values for second test
		mockDB.On("First", &domain.Item{}, 2).Return(&domain.Item{}, nil)

		result, err := r.Delete(ctx, 2)
		if err != nil {
			t.Errorf("Delete(2) returned error: %v", err)
		}

		if result != "No item found with given ID" {
			t.Errorf("Delete(2) returned unexpected message: %s", result)
		}

		// Log success
		t.Log("Delete(2) passed")
	}
}
