// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser/v2/ast"
)

type ExecutionContext struct {
}

func (ec *ExecutionContext) SchemaMethod(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	return graphql.Null
}

func (ec *ExecutionContext) marshalSchemaMethod(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.SchemaMethod(ctx, sel, v)
}

func TestSchemaMethod(t *testing.T) {
	ec := &ExecutionContext{}

	// Test case 1: When 'v' is nil, the function should return graphql.Null
	v := (*introspection.Schema)(nil)
	marshaller := ec.marshalSchemaMethod(context.Background(), nil, v)
	if marshaller == graphql.Null {
		t.Logf("Success: When 'v' is nil, the function returned graphql.Null")
	} else {
		t.Error("Fail: When 'v' is nil, the function should return graphql.Null")
	}

	// Test case 2: When 'v' is not nil, the function should return the result from the SchemaMethod method
	v = &introspection.Schema{}
	marshaller = ec.marshalSchemaMethod(context.Background(), nil, v)
	if marshaller != graphql.Null {
		t.Logf("Success: When 'v' is not nil, the function returned the result from SchemaMethod")
	} else {
		t.Error("Fail: When 'v' is not nil, the function should return the result from SchemaMethod")
	}
}
