// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package generated

import (
    "context"
    "errors"
    "testing"

    "github.com/99designs/gqlgen/graphql"
    "github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
)

type mockResolver struct{}

func (m *mockResolver) Mutation() model.MutationResolver {
    return &mockMutationResolver{}
}

type mockMutationResolver struct{}

func (m *mockMutationResolver) CreateItems(ctx context.Context, input model.NewItem) (*model.Item, error) {
    return &model.Item{ID: "1", Name: "TestItem", Description: "TestDescription"}, nil
}

type executionContext struct {
    ResolverMiddleware func(ctx context.Context, next graphql.Resolver) (res interface{}, err error)
    resolvers *mockResolver
}

func (ec *executionContext) _Mutation_createItems(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
    res, err := ec.resolvers.Mutation().CreateItems(ctx, model.NewItem{})
    if err != nil {
        return graphql.Null
    }
    return graphql.MarshalString(res.Name)
}

func Test_Mutation_createItems_f1177e58af(t *testing.T) {
    t.Run("success", func(t *testing.T) {
        ec := &executionContext{
            ResolverMiddleware: func(ctx context.Context, next graphql.Resolver) (res interface{}, err error) {
                return next(ctx)
            },
            resolvers: &mockResolver{},
        }

        field := graphql.CollectedField{}
        result := ec._Mutation_createItems(context.Background(), field)

        if result == graphql.Null {
            t.Error("The result should not be null")
        } else {
            t.Log("Test_Mutation_createItems_f1177e58af success case passed")
        }
    })

    t.Run("fail", func(t *testing.T) {
        ec := &executionContext{
            ResolverMiddleware: func(ctx context.Context, next graphql.Resolver) (res interface{}, err error) {
                return nil, errors.New("forced error")
            },
            resolvers: &mockResolver{},
        }

        field := graphql.CollectedField{}
        result := ec._Mutation_createItems(context.Background(), field)

        if result != graphql.Null {
            t.Error("The result should be null")
        } else {
            t.Log("Test_Mutation_createItems_f1177e58af failure case passed")
        }
    })
}
