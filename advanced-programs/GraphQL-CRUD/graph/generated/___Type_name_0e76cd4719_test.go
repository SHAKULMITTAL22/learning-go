// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/stretchr/testify/assert"
	"testing"
)

// Test___Type_name_0e76cd4719 is a unit test function for the method ___Type_name in executionContext
func Test___Type_name_0e76cd4719(t *testing.T) {
	ec := &executionContext{}  

	t.Run("Test with valid object", func(t *testing.T) {
		obj := &introspection.Type{
			Name: "TestType",
		}

		result := ec.___Type_name(context.Background(), graphql.CollectedField{}, obj)

		if assert.NotNil(t, result) {
			t.Log("___Type_name function passed the test with valid object")
		} else {
			t.Logf("Arguments : %v, %v", context.Background(), obj)
			t.Error("___Type_name function failed the test with valid object")
		}
	})

	t.Run("Test with nil object", func(t *testing.T) {
		result := ec.___Type_name(context.Background(), graphql.CollectedField{}, nil)
		
		if assert.Nil(t, result) {
			t.Log("___Type_name function passed the test with nil object")
		} else {
			t.Logf("Arguments : %v, %v", context.Background(), nil)
			t.Error("___Type_name function failed the test with nil object")
		}
	})

	t.Run("Test with panic in function", func(t *testing.T) {
		obj := &introspection.Type{
			Name: "TestType",
		}

		ec.ResolverMiddleware = func(ctx context.Context, next graphql.Resolver) (res interface{}, err error) {
			panic("Test Panic")
		}

		result := ec.___Type_name(context.Background(), graphql.CollectedField{}, obj)

		if assert.NotNil(t, result) && result == graphql.Null {
			t.Log("___Type_name function passed the test with panic in function")
		} else {
			t.Logf("Arguments : %v, %v", context.Background(), obj)
			t.Error("___Type_name function failed the test with panic in function")
		}
	})
}
