// Test file generated by AI for 'azure-32k-go' project using 'Azure OpenAI' model 'roost-gpt4-32k'

package generated

import (
	"context"
	"errors"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
)

type TestResolver struct{}

// This test function verifies the '___Field_name' function with a valid field object and expects a valid string.
func Test___Field_name_bdd863490b(t *testing.T) {
	ec := executionContext{ResolverMiddleware: func(ctx context.Context, next graphql.Resolver) (interface{}, error) {
		return next(ctx)
	}}
	obj := &introspection.Field{Name: "TestField"}
	field := graphql.CollectedField{
		Name: "TestField",
	}
	res, _ := ec.___Field_name(context.Background(), field, obj)
	str, ok := res.(string)
	if !ok {
		t.Errorf("Expected a valid string, got %v", res)
	}
	if str == "" {
		t.Errorf("Expected a non-empty string; got empty string.")
	}
	t.Log("Test was successful with arguments: ", field)
}

// This test function checks the '___Field_name' function when an error is returned from the ResolverMiddleware.
func Test___Field_name_Error_bdd863490b(t *testing.T) {
	ec := executionContext{ResolverMiddleware: func(ctx context.Context, next graphql.Resolver) (interface{}, error) {
		return nil, errors.New("Resolver Error")
	}}
	obj := &introspection.Field{Name: "TestField"}
	field := graphql.CollectedField{
		Name: "TestField",
	}
	res, _ := ec.___Field_name(context.Background(), field, obj)
	if res != nil {
		t.Errorf("Expected null, got %v", res)
	}
	t.Log("Test was successful with arguments: ", field)
}
