// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package generated

import (
	"context"
	"errors"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
)

func Test___EnumValue_name_d68367a5df(t *testing.T) {
	ec := &executionContext{}
	field := graphql.CollectedField{}

	t.Run("success case", func(t *testing.T) {
		obj := &introspection.EnumValue{Name: "TestEnum"}
		res := ec.___EnumValue_name(context.Background(), field, obj)
		if res == nil || res.String() != "TestEnum" {
			t.Error("Test___EnumValue_name_d68367a5df failed on success case")
		} else {
			t.Log("Test___EnumValue_name_d68367a5df passed on success case")
		}
	})

	t.Run("error case", func(t *testing.T) {
		obj := &introspection.EnumValue{Name: ""}
		res := ec.___EnumValue_name(context.Background(), field, obj)
		if res != nil && res.String() != "" {
			t.Error("Test___EnumValue_name_d68367a5df failed on error case")
		} else {
			t.Log("Test___EnumValue_name_d68367a5df passed on error case")
		}
	})

	t.Run("panic case", func(t *testing.T) {
		defer func() {
			if r := recover(); r != nil {
				t.Log("Test___EnumValue_name_d68367a5df passed on panic case")
			} else {
				t.Error("Test___EnumValue_name_d68367a5df failed on panic case")
			}
		}()
		obj := &introspection.EnumValue{Name: "PanicEnum"}
		ec.ResolverMiddleware = func(ctx context.Context, next func(ctx context.Context) (res interface{}, err error)) (interface{}, error) {
			return nil, errors.New("force panic")
		}
		ec.___EnumValue_name(context.Background(), field, obj)
	})
}
