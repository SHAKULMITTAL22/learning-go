// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
)

// Test___EnumValue_name_d68367a5df is a test case for the ___EnumValue_name method
func Test___EnumValue_name_d68367a5df(t *testing.T) {
	t.Run("success", func(t *testing.T) {
		field := &graphql.CollectedField{}
		obj := &introspection.EnumValue{Name: "TestName"}
		executionContext := &executionContext{}
		ret := executionContext.___EnumValue_name(context.Background(), field, obj)
		res, ok := ret.(graphql.Marshaler)
		if !ok || res == graphql.Null {
			t.Error("Test___EnumValue_name_d68367a5df failed on success scenario")
			t.Log("Arguments: ", field, ",", obj)
			t.Log("Returned: ", ret)
		} else {
			t.Log("Test___EnumValue_name_d68367a5df successful on success scenario")
		}
	})

	t.Run("failure", func(t *testing.T) {
		field := &graphql.CollectedField{}
		obj := &introspection.EnumValue{Name: ""}
		executionContext := &executionContext{}
		ret := executionContext.___EnumValue_name(context.Background(), field, obj)
		res, ok := ret.(graphql.Marshaler)
		if !ok || res != graphql.Null {
			t.Error("Test___EnumValue_name_d68367a5df failed on failure scenario")
			t.Log("Arguments: ", field, ",", obj)
			t.Log("Returned: ", ret)
		} else {
			t.Log("Test___EnumValue_name_d68367a5df successful on failure scenario")
		}
	})

	t.Run("panic", func(t *testing.T) {
		field := &graphql.CollectedField{}
		obj := &introspection.EnumValue{Name: "TestName"}
		executionContext := &executionContext{}
		defer func() {
			if r := recover(); r != nil {
				t.Log("Test___EnumValue_name_d68367a5df successful on panic scenario")
			} else {
				t.Error("Test___EnumValue_name_d68367a5df failed on panic scenario")
				t.Log("Arguments: ", field, ",", obj)
			}
		}()
		executionContext.___EnumValue_name(context.Background(), field, obj)
	})
}
