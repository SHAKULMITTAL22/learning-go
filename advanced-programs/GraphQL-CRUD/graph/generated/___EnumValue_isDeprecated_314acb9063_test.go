// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

func Test___EnumValue_isDeprecated_314acb9063(t *testing.T) {
	t.Run("Test success case", func(t *testing.T) {
		ec := &executionContext{}
		ctx := context.Background()
		field := graphql.CollectedField{}
		obj := &introspection.EnumValue{
			IsDeprecated: func() bool { return true },
		}

		res := ec.___EnumValue_isDeprecated(ctx, field, obj)
		if res == nil {
			t.Error("Expected result not to be nil")
		} else {
			t.Log("Test success case passed")
		}
	})

	t.Run("Test failure case with nil EnumValue", func(t *testing.T) {
		ec := &executionContext{}
		ctx := context.Background()
		field := graphql.CollectedField{}
		obj := &introspection.EnumValue{}

		res := ec.___EnumValue_isDeprecated(ctx, field, obj)
		if res != nil {
			t.Error("Expected result to be nil")
		} else {
			t.Log("Test failure case with nil EnumValue passed")
		}
	})

	t.Run("Test failure case with nil executionContext", func(t *testing.T) {
		ec := &executionContext{}
		ctx := context.Background()
		field := graphql.CollectedField{}
		obj := &introspection.EnumValue{
			IsDeprecated: func() bool { return true },
		}

		res := ec.___EnumValue_isDeprecated(ctx, field, obj)
		if res != nil {
			t.Error("Expected result to be nil")
		} else {
			t.Log("Test failure case with nil executionContext passed")
		}
	})
}
