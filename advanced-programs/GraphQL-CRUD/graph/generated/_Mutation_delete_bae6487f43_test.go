// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"
	"github.com/99designs/gqlgen/graphql"
	"github.com/stretchr/testify/mock"
	"errors"
)

// MockedResolver is a mock resolver to simulate real operation
type MockedResolver struct{
	mock.Mock
}

func (mr *MockedResolver) Mutation() MutationResolver {
	return mr
}

func (mr *MockedResolver) Delete(ctx context.Context, id int) (string, error) {
	args := mr.Called(ctx, id)
	return args.String(0), args.Error(1)
}

type MutationResolver interface {
	Delete(context.Context, int) (string, error)
}

type executionContext struct {
	resolvers interface{}
}

func (ec *executionContext) _Mutation_delete(ctx context.Context, field *graphql.CollectedField) *graphql.BasicResolver  {
	id := 123
	result, err := ec.resolvers.(*MockedResolver).Delete(ctx, id)
	if err != nil {
		return nil
	}
	return &graphql.BasicResolver{Result: result}
}

// Test_Mutation_delete_bae6487f43 tests the _Mutation_delete method
func Test_Mutation_delete_bae6487f43(t *testing.T) {
    ec := &executionContext{
		resolvers: &MockedResolver{},
	}

	// Test case 1: success case
	t.Run("success case", func(t *testing.T) {
		ec.resolvers.(*MockedResolver).On("Delete", mock.Anything, 123).Return("success", nil)
		result := ec._Mutation_delete(context.Background(), &graphql.CollectedField{})
		if result == nil || result.Created == nil {
			t.Error("Unexpected result: ", result)
		} else {
			t.Log("Success: ", result)
		}
	})

	// Test case 2: return null case
	t.Run("return null case", func(t *testing.T) {
		ec.resolvers.(*MockedResolver).On("Delete", mock.Anything, 123).Return("null", nil)
		result := ec._Mutation_delete(context.Background(), &graphql.CollectedField{})
		if result == nil {
			t.Error("Unexpected result: ", result)
		} else {
			t.Log("Success: ", result)
		}
	})

	// Test case 3: error case
	t.Run("error case", func(t *testing.T) {
		ec.resolvers.(*MockedResolver).On("Delete", mock.Anything, 123).Return("", errors.New("test error"))
		result := ec._Mutation_delete(context.Background(), &graphql.CollectedField{})
		if result == nil {
			t.Error("Unexpected result: ", result)
		} else {
			t.Log("Success: ", result)
		}
	})
}
