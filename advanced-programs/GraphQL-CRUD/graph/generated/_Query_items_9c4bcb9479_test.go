// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package generated

import (
	"context"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
)

func Test_Query_items_9c4bcb9479(t *testing.T) {
	t.Run("test success case", func(t *testing.T) {
		ec := &executionContext{}
		ec.resolvers = &StubResolvers{items: []*model.Item{{ID: "1", Title: "Item1"}, {ID: "2", Title: "Item2"}}}
		field := graphql.CollectedField{}
		result := ec._Query_items(context.Background(), &field)
		if result == nil {
			t.Errorf("Expected result not to be null")
		}
		t.Log("Test success case passed")
	})

	t.Run("test failure case", func(t *testing.T) {
		ec := &executionContext{}
		ec.resolvers = &StubResolvers{err: errors.New("error")}
		field := graphql.CollectedField{}
		result := ec._Query_items(context.Background(), &field)
		if result != nil {
			t.Errorf("Expected result to be null")
		}
		t.Log("Test failure case passed")
	})
}

type StubResolvers struct {
	items []*model.Item
	err   error
}

func (r *StubResolvers) Query() graphql.ResolverRoot {
	return &queryResolver{r}
}

type queryResolver struct{ *StubResolvers }

func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	return r.items, r.err
}
