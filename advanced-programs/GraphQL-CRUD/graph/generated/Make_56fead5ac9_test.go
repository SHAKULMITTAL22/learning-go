// Corrected Test Case:

// This program is generated by RoostGPT for azure-32k-go with AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"errors"
	"reflect"
	"testing"
)

func TestMake_56fead5ac9(t *testing.T) {
	ec := executionContext{}
	var testCases = []struct {
		input    interface{}
		expected []string
		hasError bool
	}{
		{
			input:    []interface{}{"QUERY", "MUTATION"},
			expected: []string{"QUERY", "MUTATION"},
			hasError: false,
		},
		{
			input:    "STRING",
			expected: []string{"STRING"},
			hasError: false,
		},
		{
			input:    []interface{}{0, 32.5},
			expected: nil,
			hasError: true, 
		},
	}

	for i, tc := range testCases {
		output, err := ec.unmarshalN__DirectiveLocation2ᚕstringᚄ(context.Background(), tc.input)
		if !tc.hasError && err != nil {
			t.Errorf("Test Case %d: unexpected error: %v", i+1, err)
			t.Fatalf("Test Case %d: input: %v, error message: %v", i+1, tc.input, err)
		} else if tc.hasError && err == nil {
			t.Errorf("Test Case %d: expected an error, got none", i+1)
			t.Fatalf("Test Case %d: input: %v, error message: expected an error but got none", i+1, tc.input)
		}

		if !reflect.DeepEqual(output, tc.expected) {
			t.Errorf("Test Case %d: output did not match expected", i+1)
			t.Logf("Test Case %d: input: %v, output: %v, expected: %v", i+1, tc.input, output, tc.expected)
		} else {
			t.Logf("Test Case %d: method worked as expected", i+1)
		}
	}
}
