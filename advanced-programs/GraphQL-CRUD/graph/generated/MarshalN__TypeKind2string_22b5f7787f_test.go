// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

type executionContext struct{
	schema *ast.Schema
	errs gqlparser.MultiError
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	if v == "" {
		ec.errs = append(ec.errs, gqlparser.Errorf("marshalN__TypeKind2string error: nil variable"))
		return graphql.Null
	}
	return graphql.MarshalString(v)
}

func (ec *executionContext) MarshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return ec.marshalN__TypeKind2string(ctx, sel, v)
}

func TestMarshalN__TypeKind2string_22b5f7787f(t *testing.T) { 
	// Define the necessary context and variables
	sel := ast.SelectionSet{}
	ctx := context.Background()
	ec := &executionContext{}
	var v string

	// Test case : when there is no error
	v = "graphql"
	res := ec.MarshalN__TypeKind2string(ctx, sel, v)
	stringRes, ok := res.(graphql.MarshalString)
	if !ok || string(stringRes) == "" {
		t.Errorf("MarshalN__TypeKind2string method test failure - arguments: ctx: %v, sel: %v, v: %s",
		 ctx, sel, v)
	} else {
		t.Logf("MarshalN__TypeKind2string method test success - arguments: ctx: %v, sel: %v, v: %s",
		 ctx, sel, v)
	}
	
	// Test case : when there's error
	// Trigger error by providing nil variable
	v = ""
	res = ec.MarshalN__TypeKind2string(ctx, sel, v)
	if len(ec.errs) == 0 {
		t.Errorf("MarshalN__TypeKind2string method test failure - arguments: ctx: %v, sel: %v, v: %s",
		 ctx, sel, v)
	} else {
		t.Logf("MarshalN__TypeKind2string method test success - arguments: ctx: %v, sel: %v, v: %s",
		 ctx, sel, v)
	}
}
