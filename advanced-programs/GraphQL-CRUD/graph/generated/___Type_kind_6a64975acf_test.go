// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/stretchr/testify/assert"
)

// Struct that will contain the mock implementations
type Resolver struct {
	Middleware func(ctx context.Context) (interface{}, error)
}

// Mock implementation
func (r *Resolver) Kind() string {
	return "__Type"
}

// ExecutionContext that will use the mock Resolver
type ExecutionContext struct {
	ResolverMiddleware func(ctx context.Context, next graphql.ResolverMiddleware) (res interface{}, err error)
}

func NewResolver() *ExecutionContext {
	r := &Resolver{}
	return &ExecutionContext{
		ResolverMiddleware: func(ctx context.Context, next graphql.ResolverMiddleware) (res interface{}, err error) {
			return next(ctx)
		},
	}
}

func (s *ExecutionContext) ___Type_kind(ctx context.Context, _ graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	kind := obj.Kind()
	return graphql.MarshalString(kind)
}

// Unit tests
func Test___Type_kind_6a64975acf(t *testing.T) {
	// creating the resolver
	ec := NewResolver()
	var obj *introspection.Type
	field := graphql.CollectedField{}
	var ctx = context.Background()

	t.Run("test success", func(t *testing.T) {
		obj = &introspection.Type{
			Kind: "__Type",
		}

		result := ec.___Type_kind(ctx, field, obj)
		expected := "__Type"
		assert.Equal(t, expected, result.Value(ctx), "Returned wrong value")

		t.Log("Test case passed : Returned correct value")
	})

	t.Run("test post panic", func(t *testing.T) {
		assert.Panics(t, func() { ec.___Type_kind(ctx, field, nil) }, "The code does not panic")

		t.Log("Test case passed : Executed with a panic")
	})
}
