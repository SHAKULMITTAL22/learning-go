// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
    "context"
    "testing"

    "github.com/99designs/gqlgen/graphql/introspection"
    "github.com/vektah/gqlparser/v2/ast"
    "github.com/stretchr/testify/assert"
)

type executionContext struct {
    ___Schema func(context.Context, ast.SelectionSet, *introspection.Schema) graphql.Marshaler
}

// TestSchema_6f0e8842d0 executes tests on the function marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema.
func TestSchema_6f0e8842d0(t *testing.T) {
    t.Run("successful marshalling", func(t *testing.T) {
        ec := &executionContext{
            ___Schema: func(_ context.Context, _ ast.SelectionSet, _ *introspection.Schema) graphql.Marshaler {
                return graphql.Null // Consider a successful case where appropriate Marshaler is returned
            },
        }

        assert.NotNil(t, ec.marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(context.Background(), nil, introspection.Schema{}))
        t.Log("Success case passed")
    })

    t.Run("failure in marshalling", func(t *testing.T) {
        ec := &executionContext{
            ___Schema: func(_ context.Context, _ ast.SelectionSet, _ *introspection.Schema) graphql.Marshaler {
                return nil // Consider a failure case where nil Marshaler is returned
            },
        }

        assert.Nil(t, ec.marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(context.Background(), nil, introspection.Schema{}))
        t.Log("Failure case passed")
    })
}
