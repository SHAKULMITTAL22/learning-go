// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
)

func Test___EnumValue_description_88ed2f511a(t *testing.T) {
	// Creates a new execution context
	ec := &executionContext{}

	// Creates a CollectedField
	field := graphql.CollectedField{}

	// TODO: Replace with real enum value
	obj := &introspection.EnumValue{Description: "Test Enum Value"}

	t.Run("success_case", func(t *testing.T) {
		ctx := context.TODO()

		// Call the function and check the return value
		res := ec.___EnumValue_description(ctx, field, obj)
		if res == nil {
			t.Errorf("Expected non nil result, got nil.")
			return
		}

		str, err := res.MarshalJSON()
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
			return
		}

		// TODO: Replace with expected result
		expected := "\"Test Enum Value\""
		if string(str) != expected {
			t.Errorf("Expected result %v, got %v", expected, string(str))
		}
	})

	t.Run("error_case", func(t *testing.T) {
		ctx := context.TODO()

		// Call the function with nil obj
		res := ec.___EnumValue_description(ctx, field, nil)
		if res == nil {
			t.Errorf("Expected non nil result, got nil.")
			return
		}

		str, err := res.MarshalJSON()
		if err != nil {
			t.Errorf("Unexpected error: %v", err)
			return
		}

		// The result should be null
		expected := "null"
		if string(str) != expected {
			t.Errorf("Expected result %v, got %v", expected, string(str))
		}
	})
}
