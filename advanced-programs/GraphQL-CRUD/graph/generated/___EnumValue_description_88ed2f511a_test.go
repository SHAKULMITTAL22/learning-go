// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// Mocking executionContext
type executionContextMock struct {
	ResolverMiddleware graphql.FieldMiddleware
	marshalOString2string func(ctx context.Context, selections []ast.Selection, str string) graphql.Marshaler
	Error func(ctx context.Context, err error)
	Recover func(ctx context.Context, err interface{}) error
}

func Test___EnumValue_description_88ed2f511a(t *testing.T) {
	t.Run("Test___EnumValue_description_88ed2f511a:Success", func(t *testing.T) {
		ec := &executionContextMock{
			ResolverMiddleware: func(ctx context.Context, next graphql.Resolver) (res interface{}, err error) {
				return "Test Description", nil
			},
			marshalOString2string: func(ctx context.Context, selections []ast.Selection, str string) graphql.Marshaler {
				return graphql.String(str)
			},
			Error: func(ctx context.Context, err error) {},
			Recover: func(ctx context.Context, err interface{}) error {
				return nil
			},
		}

		obj := &introspection.EnumValue{
			Description: "Test Description",
		}

		field := graphql.CollectedField{}

		res := ec.___EnumValue_description(context.Background(), field, obj)

		if res == nil {
			t.Errorf("Expected non-nil result, got nil")
			return
		}

		if res.(graphql.String) != "Test Description" {
			t.Errorf("Expected 'Test Description', got '%s'", res.(graphql.String))
		}
	})

	t.Run("Test___EnumValue_description_88ed2f511a:Failure", func(t *testing.T) {
		ec := &executionContextMock{
			ResolverMiddleware: func(ctx context.Context, next graphql.Resolver) (res interface{}, err error) {
				return nil, errors.New("Test error")
			},
			marshalOString2string: func(ctx context.Context, selections []ast.Selection, str string) graphql.Marshaler {
				return graphql.String(str)
			},
			Error: func(ctx context.Context, err error) {},
			Recover: func(ctx context.Context, err interface{}) error {
				return nil
			},
		}

		obj := &introspection.EnumValue{
			Description: "Test Description",
		}

		field := graphql.CollectedField{}

		res := ec.___EnumValue_description(context.Background(), field, obj)

		if res != graphql.Null {
			t.Errorf("Expected graphql.Null, got '%s'", res)
		}
	})
}
