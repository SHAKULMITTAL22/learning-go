// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"fmt"
	"github.com/99designs/gqlgen/graphql"
	"github.com/stretchr/testify/assert"
	"testing"
)


// TestUnmarshalOString2string_a0a133fc23 is a test suite for testing unmarshalOString2string function
func TestUnmarshalOString2string_a0a133fc23(t *testing.T) {

	ec := &executionContext{}

	t.Run(" successful unmarshal", func(t *testing.T) {
		expected := "Hello, World!"
		v := expected
		res, err := ec.unmarshalOString2string(context.Background(), v)
		if err != nil {
			t.Error(fmt.Sprintf("method arguments: context.Background(), %v", v), err)
		} else {
			assert.Equal(t, expected, res)
			t.Log("unmarshal operation successful")
		}
	})

	t.Run(" unsuccessful unmarshal with int type", func(t *testing.T) {
		v := 123
		_, err := ec.unmarshalOString2string(context.Background(), v)
		if err == nil {
			t.Error(fmt.Sprintf("method arguments: context.Background(), %v", v), "this test case should return error")
		} else {
			t.Log("unmarshalling of int type failed as expected")
		}
	})

	t.Run(" unsuccessful unmarshal with bool type", func(t *testing.T) {
		v := true
		_, err := ec.unmarshalOString2string(context.Background(), v)
		if err == nil {
			t.Error(fmt.Sprintf("method arguments: context.Background(), %v", v), "this test case should return error")
		} else {
			t.Log("unmarshalling of bool type failed as expected")
		}
	})

}
