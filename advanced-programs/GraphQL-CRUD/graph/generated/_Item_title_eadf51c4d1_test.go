// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/handler/test"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
)

// Test function for _Item_title method
func Test_Item_title_eadf51c4d1(t *testing.T) {
	t.Run("Test with non-empty title", func(t *testing.T) {
		ec := executionContext{}

		// Setting up the context, field and the object with a non-empty title field.
		ctx := context.Background()
		field := graphql.CollectedField{}
		obj := &model.Item{ID: "1", Title: "Sample Title"}

		title := ec._Item_title(ctx, field, obj)

		// If title received is not a null, log a success message.
		if title != graphql.Null {
			t.Log("Test Passed!")
		} else {
			// Log a failure message when actual output is not as per expected output.
			t.Error("Test Failed! Actual:", title, "Expected: Non-null Value")
		}
	})

	t.Run("Test with empty title", func(t *testing.T) {
		ec := executionContext{}

		// Setting up the context, field and the object with an empty title field.
		ctx := context.Background()
		field := graphql.CollectedField{}
		obj := &model.Item{ID: "2", Title: ""}

		title := ec._Item_title(ctx, field, obj)

		// If title received is a null, log a success message.
		if title == graphql.Null {
			t.Log("Test Passed!")
		} else {
			// Log a failure message when actual output is not as per expected output.
			t.Error("'Test Failed! Actual:", string(title), "Expected: Null Value") 
		}
	})
}
