// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"testing"
	"bytes"
	"context"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

//unit test case for Exec method
func TestExec_084531e294(t *testing.T) {

	//creating object of executableSchema
	executableSchemaObj := &executableSchema{}

	//creating dummy context
	ctx := context.Background()

	//creating OperationContext and setting in context
	oc := &graphql.OperationContext{ Operation: &ast.OperationDefinition{} }
	ctx = graphql.WithOperationContext(ctx, oc)

	//Mocking _Query method
	executableSchemaObj._Query = func (ctx context.Context, selectionSet ast.SelectionSet) graphql.Marshaler {
		return graphql.WriterFunc(func(w *bytes.Buffer) {
			w.WriteString("Query response")
		})
	}

	//Mocking _Mutation method
	executableSchemaObj._Mutation = func (ctx context.Context, selectionSet ast.SelectionSet) graphql.Marshaler {
		return graphql.WriterFunc(func(w *bytes.Buffer) {
			w.WriteString("Mutation response")
		})
	}

	//testing for Query operation
	oc.Operation.Operation = ast.Query
	respHandler := executableSchemaObj.Exec(ctx)
	resp := respHandler(ctx)
	if string(resp.Data) != "Query response" {
		t.Errorf("Exec failed for Query operation, expected %v, got %v", "Query response", string(resp.Data))
	} else {
		t.Logf("Exec success for Query operation",)
	}

	//testing for Mutation operation
	oc.Operation.Operation = ast.Mutation
	respHandler = executableSchemaObj.Exec(ctx)
	resp = respHandler(ctx)
	if string(resp.Data) != "Mutation response" {
		t.Errorf("Exec failed for Mutation operation, expected %v, got %v", "Mutation response", string(resp.Data))
	} else {
		t.Logf("Exec success for Mutation operation")
	}

	//testing for unsupported operation
	oc.Operation.Operation = ast.Subscription
	respHandler = executableSchemaObj.Exec(ctx)
	resp = respHandler(ctx)
	if resp.Errors == nil || resp.Errors[0].Error() != "unsupported GraphQL operation" {
		t.Error("Exec failed for unsupported operation")
	} else {
		t.Log("Exec success for unsupported operation")
	}
}
