// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
    "context"
    "strconv"
    "testing"

    "github.com/99designs/gqlgen/graphql"
    "github.com/99designs/gqlgen/graphql/introspection"
    "github.com/vektah/gqlparser/v2/ast"
)

type executionContext struct{
    someFieldHere string  // TODO: Add suitable fields here for your use case
}

// TestMake_9635675437 tests the method marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue
func TestMake_9635675437(t *testing.T) {
    // Test case 1, Testing with an empty array
    ec := &executionContext{}
    ctx := context.Background()
    sel := ast.SelectionSet{}
    v := []introspection.InputValue{}
    res := ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v)
    if len(res.(graphql.Array)) != 0 {
        t.Error("Test case 1 failed with res=", strconv.Itoa(len(res.(graphql.Array))))
    } else{
        t.Log("Test case 1, Testing with an empty array, has passed successfully.")
    }

    // Test case 2, Testing with a non-empty array
    v = []introspection.InputValue{
        introspection.InputValue{Name: "testInputValue1"},
        introspection.InputValue{Name: "testInputValue2"},
    }
    res = ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v)
    if len(res.(graphql.Array)) != 2 {
        t.Error("Test case 2 failed with res=", strconv.Itoa(len(res.(graphql.Array))))
    } else{
        t.Log("Test case 2, Testing with a non-empty array, has passed successfully.")
    }
}
