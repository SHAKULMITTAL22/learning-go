// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// Test function for the _Query method
func Test_Query_5fade268b0(t *testing.T) {
	// Creating the mocked execution context
	ec := &executionContext{Resolver: &mockedResolvers{}}

	// Test Case #1: Success
	{
		sel := ast.SelectionSet{
			&ast.Field{Alias: "items"},
		}

		got := ec._Query(context.Background(), sel)

		if _, ok := got.(*graphql.FieldSet); !ok {
			t.Error("Failed Test #1: Expected *graphql.FieldSet but got a different type")
		}

		t.Log("Passed Test #1: Expected type matched the result")
	}

	// Test Case #2: Handling of unknown field
	{
		sel := ast.SelectionSet{
			&ast.Field{Alias: "unknown"},
		}

		defer func() {
			if r := recover(); r != nil {
				t.Log("Passed Test #2: Panic occurred for unknown field")
			}
		}()

		ec._Query(context.Background(), sel)

		t.Error("Failed Test #2: Panic expected but did not occur")
	}

	// Test Case #3: __typename should return "Query"
	{
		sel := ast.SelectionSet{
			&ast.Field{Alias: "__typename"},
		}

		got := ec._Query(context.Background(), sel)

		fieldSet, ok := got.(*graphql.FieldSet)
		// check for the correct type
		if !ok {
			t.Error("Failed Test #3: Expected *graphql.FieldSet but got a different type")
			return
		}

		// check if __typename is "Query"
		if typename, ok := fieldSet.Values[0].(graphql.String); !ok || typename != "Query" {
			t.Errorf("Failed Test #3: Expected typename to be \"Query\" but got %q instead", typename)
			return
		}

		t.Log("Passed Test #3: Correct typename returned for __typename")
	}
}
