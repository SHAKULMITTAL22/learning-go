// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

func Test_Item_rating_92861babf7(t *testing.T) {
	ec := executionContext{}
	field := graphql.CollectedField{}

	t.Run("Test with valid item rating", func(t *testing.T) {
		item := &model.Item{Rating: 5}
		result := ec._Item_rating(context.Background(), field, item)
		if _, ok := result.(*graphql.Null); ok {
			t.Errorf("Test with valid item rating failed, got Null, expected Int")
		} else {
			t.Log("Test with valid item rating passed")
		}
	})

	t.Run("Test with nil item", func(t *testing.T) {
		result := ec._Item_rating(context.Background(), field, nil)
		if _, ok := result.(*graphql.Null); !ok {
			t.Errorf("Test with nil item failed, got not Null, expected Null")
		} else {
			t.Log("Test with nil item passed")
		}
	})

	t.Run("Test with item rating causing panic", func(t *testing.T) {
		defer func() {
			if r := recover(); r != nil {
				t.Errorf("The code panicked: %v", r)
			}
		}()
		item := &model.Item{Rating: -1}
		ec._Item_rating(context.Background(), field, item)
		t.Log("Test with item rating causing panic passed")
	})
}
