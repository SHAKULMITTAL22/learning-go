// Test generated by RoostGPT for test azure-32k-go using AI Type Azure Open AI and AI Model roost-gpt4-32k

package generated

import (
	"context"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
	"github.com/stretchr/testify/assert"
)

// Test _Item_rating method
func Test_Item_rating_92861babf7(t *testing.T) {
	// Instance creation
	ec := &executionContext{}

	// Test case: success - item with rating exists
	t.Run("success - item with rating exists", func(t *testing.T) {
		obj := &model.Item{
			Rating: 5,
		}
		
		field := graphql.CollectedField{}

		result := ec._Item_rating(context.Background(), field, obj)

		if assert.NotNil(t, result) {
			assert.Equal(t, obj.Rating, result.(int))
			t.Log("Test success - item with rating exists has passed")
		} else {
			t.Error("Test failed - item with rating exists. Arguments: ", obj)
		}
	})

	// Test case: failure - item doesn't have a rating (rating is nil)
	t.Run("failure - item without rating", func(t *testing.T) {
		obj := &model.Item{}
		
		field := graphql.CollectedField{}
		
		result := ec._Item_rating(context.Background(), field, obj)

		assert.Nil(t, result, "Expected nil, got", result)
		if result == nil {
			t.Log("Test success - item without rating has passed")
		} else {
			t.Error("Test failed - item without rating. Arguments: ", obj)
		}
	})
}
