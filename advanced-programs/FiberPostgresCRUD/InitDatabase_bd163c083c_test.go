// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package main

import (
	"bytes"
	"errors"
	"os"
	"reflect"
	"testing"

	"github.com/jinzhu/gorm"
)

// MockObj for gorm.Open()
type MockObj struct {
	gorm.SQLCommon
}

func TestInitDatabase(t *testing.T) {
	tests := []struct {
		name   string
		env    string
		err    error
		output string
	}{
		{
			name:   "Environment variable HOST not set",
			env:    "",
			err:    nil,
			output: "Connection Opened to Database\n",
		},
		{
			name:   "Environment variable HOST set",
			env:    "remotehost",
			err:    nil,
			output: "Connection Opened to Database\n",
		},
		{
			name:   "Successful database connection",
			env:    "localhost",
			err:    nil,
			output: "Connection Opened to Database\n",
		},
		{
			name:   "Unsuccessful database connection",
			env:    "unreachablehost",
			err:    errors.New("failed to connect database"),
			output: "",
		},
		{
			name:   "Check if print messages are displayed correctly",
			env:    "localhost",
			err:    nil,
			output: "Connection Opened to Database\n",
		},
	}

	// Mock gorm.Open method
	oldOpen := gorm.Open
	defer func() { gorm.Open = oldOpen }()

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gorm.Open = func(dialect string, args ...interface{}) (db *gorm.DB, err error) {
				if args[0].(string) == "unreachablehost" {
					return nil, errors.New("failed to connect database")
				}
				db = &gorm.DB{
					SqlDB: new(MockObj),
				}

				return db, nil
			}

			// Mock os.Getenv
			oldGetenv := os.Getenv
			defer func() { os.Getenv = oldGetenv }()
			os.Getenv = func(key string) string {
				return tt.env
			}

			// Mock os.Stdout
			bak := os.Stdout
			r, w, _ := os.Pipe()
			os.Stdout = w

			initDatabase()

			// Back to normal state
			w.Close()
			out, _ := io.ReadAll(r)
			os.Stdout = bak

			if string(out) != tt.output || reflect.TypeOf(tt.err).Name() != reflect.TypeOf(err).Name() {
				t.Errorf("expected '%v' (type '%v') - got '%v' (type '%v')",
					tt.err, reflect.TypeOf(tt.err).Name(), err, reflect.TypeOf(err).Name())
			}
		})
	}
}
